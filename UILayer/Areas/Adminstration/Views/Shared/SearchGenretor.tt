<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cshtml" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 

<#@ template language="C#" debug="true" hostspecific="true"#>


<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cshtml"#><#
System.Diagnostics.Debugger.Break();
UserSettings userSettings =
        new UserSettings
        {
            SourceCsdlPath =@"I:\D\ShoppingCenters\ShoppingCenters\DataLayer\ModelEntity.edmx",// @"Model1.edmx",
            ReferenceCsdlPaths = new string[] {},
            FullyQualifySystemTypes = true,
            CreateContextAddToMethods = true,
            CamelCaseFields = false,
        };

ApplyUserSettings(userSettings);
if(Errors.HasErrors)
{
    return String.Empty;
}

MetadataLoader loader = new MetadataLoader(this);
MetadataTools ef = new MetadataTools(this);
CodeRegion region = new CodeRegion(this);
CodeGenerationTools code = new CodeGenerationTools(this){FullyQualifySystemTypes = userSettings.FullyQualifySystemTypes, CamelCaseFields = userSettings.CamelCaseFields};

ItemCollection = loader.CreateEdmItemCollection(SourceCsdlPath, ReferenceCsdlPaths.ToArray());
ModelNamespace = loader.GetModelNamespace(SourceCsdlPath);
string namespaceName ="ServiceLayer.Maper"; //code.VsNamespaceSuggestion();
UpdateObjectNamespaceMap(namespaceName);

#>




<#
  
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>


<#
        PushIndent(CodeRegion.GetIndent(1));
    }

#>

<#

     string EntityNameMaper="";
    foreach (EntityType entity in GetSourceSchemaTypes<EntityType>().OrderBy(e => e.Name))
    {
        EntityNameMaper= code.Escape(entity);
#>
///  <#=code.Escape(entity)#>
    @using DataLayer
    @using Utility

@{
    using (Html.BeginForm("Search", "<#=code.Escape(entity)#>Admin", new { area = "Adminstration" }, FormMethod.Post, new { id = "EditorRowForm" }))
    {
    <table>
<# 
var Enumerator=entity.Properties.Where(p => p.DeclaringType == entity && p.TypeUsage.EdmType is PrimitiveType).GetEnumerator();
while (Enumerator.MoveNext())
        {
#><tr class="tr1A">
<td class="tdf1A"><#=code.Escape(Enumerator.Current)#>:</td>
<td class="tdf2A"> @Html.TextBox("<#=code.Escape(Enumerator.Current)#>", "", new { @id = "<#=code.Escape(Enumerator.Current)#>" }) And </td>     

<#Enumerator.MoveNext();
 if(Enumerator.Current != null){
 #>
<td class="tdf1A"><#=code.Escape(Enumerator.Current)#>:</td>
<td class="tdf2A"> @Html.TextBox("<#=code.Escape(Enumerator.Current)#>", "", new { @id = "<#=code.Escape(Enumerator.Current)#>" }) And </td>  
<# }  #>
</tr>
<#
 }
///انتهای هدر جدول
#>
        
    </table>           
    <input type="submit" value="جستجو" />    
    }
} 

 



<#
    }

#>
<#
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>




<#
    }
    VerifyTypeUniqueness();
#>
<#+

    ////////
    ////////  Reusable Template Sections
    ////////

    ////////
    ////////  Write Factory Method.
    ////////
    private void WriteFactoryMethod(StructuralType structuralType, CodeGenerationTools code)
    {
        CodeRegion region = new CodeRegion(this, 1);

        string methodName = "Create" + structuralType.Name;
        UniqueIdentifierService uniqueIdentifier = new UniqueIdentifierService();
        string instanceName = code.Escape(uniqueIdentifier.AdjustIdentifier((code.CamelCase(structuralType.Name))));
        IEnumerable<FactoryMethodParameter> parameters = FactoryMethodParameter.CreateParameters(structuralType.Members.OfType<EdmProperty>().Where(p => IncludePropertyInFactoryMethod(structuralType, p)), uniqueIdentifier, MultiSchemaEscape, code);

        if (parameters.Count() == 0)
            return;

        if (structuralType.Members.Any(m => m.Name == methodName))
        {
            //  6029 is the same error number that EntityClassGenerator uses for this conflict.
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6029",
                String.Format(CultureInfo.CurrentCulture,
                        GetResourceString("Template_FactoryMethodNameConflict"), methodName, structuralType.FullName)));
        }

        region.Begin(GetResourceString("Template_RegionFactoryMethod"));
#>

    /// <summary>
    /// <#=String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_FactoryMethodComment"), structuralType.Name)#>
    /// </summary><#=ParameterComments(parameters.Select(p => new Tuple<string, string>(p.RawParameterName, p.ParameterComment)), region.CurrentIndentLevel)#>
    public static <#=code.Escape(structuralType)#> <#=methodName#>(<#=string.Join(", ", parameters.Select(p => p.ParameterType + " " + p.ParameterName).ToArray())#>)
    {
        <#=code.Escape(structuralType)#> <#=instanceName#> = new <#=code.Escape(structuralType)#>();
<#+
        foreach (FactoryMethodParameter parameter in parameters)
        {
            if (parameter.IsComplexType)
            {
                //  ComplexType initialization.
#>
        <#=instanceName#>.<#=code.Escape(parameter.Source)#> = StructuralObject.VerifyComplexObjectIsNotNull(<#=parameter.ParameterName#>, "<#=parameter.Source.Name#>");
<#+
            }
            else
            {
                //  PrimitiveType initialization.
#>
        <#=instanceName#>.<#=code.Escape(parameter.Source)#> = <#=parameter.ParameterName#>;
<#+
            }
        }
#>
        return <#=instanceName#>;
    }
<#+
        region.End();
    }


    ////////
    ////////  در این متد ویژگیها وفیلد های کلاس انتتی به کانترکت وصل می شود
    ////////
    private void WriteEntityToContractProperties(EdmProperty primitiveProperty, CodeGenerationTools code,string EntityName)
    {
        MetadataTools ef = new MetadataTools(this);
        string str; 
        string  str1="";
        string strFK=ToLSC(EntityName)+"."+code.Escape(primitiveProperty);
        string FK_EntityName=code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","");
        if( code.Escape(primitiveProperty).Contains("FK_")||code.Escape(primitiveProperty).Contains("Fk_"))
        {
            //اگر کلید خارجی مال سلف ریفرنسیس بود عدد 2 را به کلمه انتیتی طرف مقابل اضافه می کند
            // انتیتی کلید خارجی قبل از استفاده حتما باید چک شود که نال نباشد
            if(code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","")==EntityName  )
            {  str= code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","") + "2"+ NameFeild(GetEntityWithName(FK_EntityName));
                str1=code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","") + "2";
                str=ToLSC(EntityName)+"."+str1+"!=null ?"+ToLSC(EntityName)+"."+str+":null"; }               
            else 
            { str= code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","") + NameFeild(GetEntityWithName(FK_EntityName));
                str1=code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","");
                str=ToLSC(EntityName)+"."+str1+"!=null ?"+ToLSC(EntityName)+"."+str+":null";}
        }
        else {
            str= ToLSC(EntityName)+"."+code.Escape(primitiveProperty);
        }
        
#> 
              <#=        code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","")#> =<#=str#>,
              <#=        FillIEnumerableSelectListItemFild(primitiveProperty,code) #> 
<#+
    
 if( code.Escape(primitiveProperty).Contains("FK_")||code.Escape(primitiveProperty).Contains("Fk_"))
 {
#>
             <#=        code.Escape(primitiveProperty)#> =<#=strFK#>,
<#+
}
}
#>

<#+


        ///اگر این موجودیت رابطه ای یک به یک با یک موجودیت آی بی اس داشته باشد در این صورت از این موجودیت ارث بری می کند
        public  string  ReturnInheritanceAbs(EntityType entity)
    {
         foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity))
        {
           
            if (navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One && navProperty.Name.Contains("Abs_"))
            {
                return navProperty.ToEndMember.Name +",";
            }
        }
        return "";
    }
    ////////
    ////////  در این متد ویژگیها و فیلد های کلاس انتتی به کانترکت وصل می شود
    ////////
    private void WriteEntityToContractProperties2(EdmProperty primitiveProperty, CodeGenerationTools code,string EntityName)
    {
        
        MetadataTools ef = new MetadataTools(this);
        string str;  
        string strFK=code.Escape(primitiveProperty);
        if (EntityName=="Bridge_Document_BusinessOwner"){
            str="";
        }
        string FK_EntityName=code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","");  
        if( code.Escape(primitiveProperty).Contains("FK_")||code.Escape(primitiveProperty).Contains("Fk_"))
        {
            //اگر کلید خارجی مال سلف ریفرنسیس بود عدد 2 را به کلمه انتیتی طرف مقابل اضافه می کند
            if(code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","")==EntityName  )
            {
                str= code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","")+"2"+" != null" +" ? "+
                  ToLSC(EntityName)+"."+code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","")+"2"+ NameFeild(GetEntityWithName(FK_EntityName))+" : null" ;}
            else 
            { 
                 str= code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","")+" != null" +" ? "+
                  ToLSC(EntityName)+"."+code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","")+ NameFeild(GetEntityWithName(FK_EntityName))+" : null" ;}
        }
        else {
            str= code.Escape(primitiveProperty);
        }
        
#> 
             <#=ToLSC(EntityName)+"Contract."#><#=code.Escape(primitiveProperty).Replace("FK_","").Replace("Fk_","")#>=<#=ToLSC(EntityName)#>.<#=str#>;
              <#=        FillIEnumerableSelectListItemFild2(primitiveProperty,code,EntityName) #> 
<#+
        if( code.Escape(primitiveProperty).Contains("FK_")||code.Escape(primitiveProperty).Contains("Fk_"))
        {
#>
             <#=        ToLSC(EntityName)+"Contract."#><#=            code.Escape(primitiveProperty)#> =<#=ToLSC(EntityName)#>.<#=strFK#>;
<#+
        }
}


#>

<#+
    ////////
    ////////  در این متد ویژگیها وفیلد های کلاس انتتی با فیلدهای  فرم کالکشن پرمی کند 
    ////////
    private void mapFormCollectionToEntity(EdmProperty primitiveProperty, CodeGenerationTools code,string EntityName)
    {
        MetadataTools ef = new MetadataTools(this);
        string str= code.Escape(primitiveProperty).Replace("Fk_","").Replace("FK_","");
        if(str =="Id") str="HiddenId";
        if((code.Escape(primitiveProperty).Contains("FK_")||code.Escape(primitiveProperty).Contains("Fk_")) && str==EntityName)
        {
#> 
          <#=code.Escape(primitiveProperty)#> =formCollection["IEnumerable<#=str#>"].ToNullableInteger() ,   
<#+
        }
        else if(code.Escape(primitiveProperty).Contains("FK_")||code.Escape(primitiveProperty).Contains("Fk_"))
       {
 #>
             <#=code.Escape(primitiveProperty)#> =Convert.To<#=(primitiveProperty.TypeUsage.EdmType).Name#>(formCollection["IEnumerable<#=str#>"]) ,
<#+
        }
        else
       {
 #>
            <#=code.Escape(primitiveProperty)#> =Convert.To<#=(primitiveProperty.TypeUsage.EdmType).Name#> (formCollection["<#= str#>"]) ,
<#+
       }
    
    }
#>
<#+
    ////////
    ////////  در این متد ویژگیها وفیلد های کلاس انتتی با فیلدهای  فرم کالکشن پرمی کند 
    ////////
    private void mapEntityToEntity(EdmProperty primitiveProperty, CodeGenerationTools code,string EntityName)
    {
        MetadataTools ef = new MetadataTools(this);

#>
    desEntity.<#=code.Escape(primitiveProperty)#> =srcEntity.<#=code.Escape(primitiveProperty)#>;
<#+
       
    }
 #>

<#+
    ////////
    ////////  در این متد ویژگیها وفیلد های کلاس انتتی با فیلدهای  فرم کالکشن پرمی کند 
    ////////
    private void mapFormCollectionToEntityWithEntity(EdmProperty primitiveProperty, CodeGenerationTools code,string EntityName)
    {
        MetadataTools ef = new MetadataTools(this);
        
        string str= code.Escape(primitiveProperty).Replace("Fk_","").Replace("FK_","");
        if(str=="Id") str="HiddenId";
        if(code.Escape(primitiveProperty).Contains("FK_")||code.Escape(primitiveProperty).Contains("Fk_"))
        {
#> 

            <#=EntityName #>.<#=code.Escape(primitiveProperty)#> =(Convert.ToString(formCollection["IEnumerable<#=  str#>"]) != ConstSetting.NoChenge ? Convert.To<#=(primitiveProperty.TypeUsage.EdmType).Name#> (formCollection["IEnumerable<#=  str#>"]) :  <#=EntityName #>.<#=code.Escape(primitiveProperty)#>);

<#+
        }
        else
       {
 #>

           <#=EntityName #>.<#=code.Escape(primitiveProperty)#> =(Convert.ToString(formCollection["<#=str#>"]) != ConstSetting.NoChenge ? Convert.To<#=(primitiveProperty.TypeUsage.EdmType).Name#> (formCollection["<#=str#>"]) : <#=EntityName #>.<#=code.Escape(primitiveProperty)#>);

<#+
       }
    
    }
#>




<#+
  
    private void WriteLazyLoadingEnabled(EntityContainer container)
    {
        string lazyLoadingAttributeValue = null;
        string lazyLoadingAttributeName = MetadataConstants.EDM_ANNOTATION_09_02 + ":LazyLoadingEnabled";
        if(MetadataTools.TryGetStringMetadataPropertySetting(container, lazyLoadingAttributeName, out lazyLoadingAttributeValue))
        {
            bool isLazyLoading = false;
            if(bool.TryParse(lazyLoadingAttributeValue, out isLazyLoading))
            {
#>
        this.ContextOptions.LazyLoadingEnabled = <#=isLazyLoading.ToString().ToLowerInvariant()#>;
<#+
            }
        }
    }

////////
////////  Declare Template Public Properties.
////////
public string SourceCsdlPath{ get; set; }
public string ModelNamespace{ get; set; }
public EdmItemCollection ItemCollection{ get; set; }
public IEnumerable<string> ReferenceCsdlPaths{ get; set; }
public Nullable<bool> CreateContextAddToMethods{ get; set; }
public Dictionary<string, string> EdmToObjectNamespaceMap
{
    get { return _edmToObjectNamespaceMap; }
    set { _edmToObjectNamespaceMap = value; }
}
public Dictionary<string, string> _edmToObjectNamespaceMap = new Dictionary<string, string>();
public Double SourceEdmVersion
{
    get
    {
        if (ItemCollection != null)
        {
            return ItemCollection.EdmVersion;
        }

        return 0.0;
    }
}
    ///گرفتن یک انتیتی با نام آن
        public  EntityType GetEntityWithName(string EntityName)
    {
           EntityType entity = GetSourceSchemaTypes<EntityType>().Where(e => e.Name==EntityName).FirstOrDefault();
     
     
        return entity;
    }
    /// درصورت نداشتن نام در یک انتیتی ای بی اس  معادل  و نام آن را برمیگرداند1 
    public string NameFeild( EntityType entity )
    {
      if( entity.Properties.Where(p => p.DeclaringType == entity && p.TypeUsage.EdmType is PrimitiveType ).Where( p => p.Name == "Name").Count()>0)
        {           return ".Name";        } 
      else 
        { 
            foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity ))
            {
                if(navProperty.ToEndMember.Name.Contains("Abs_")){return "."+navProperty.ToEndMember.Name+".Name"; }
            }
            
          return ".Name";
          }
    }
    ////اگر ویژگی مورد نظر کلید خارجی باشد  فیلد (سلکت ایتم لیست) به صورت مناسب پر می نمایید 
   public  string FillIEnumerableSelectListItemFild(EdmProperty primitiveProperty,CodeGenerationTools code)
    {
        string result="";
        string strFillName=code.Escape(primitiveProperty).Replace("Fk_","").Replace("FK_","");
        if (code.Escape(primitiveProperty).Contains("Fk_")||code.Escape(primitiveProperty).Contains("FK_") )
        {
            return "IEnumerable"+strFillName +"= _"+strFillName.ToLower() +"Service.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e" +  (NameFeild(GetEntityWithName(strFillName))) + "}),";
                 
        }//_userService
        else 
        {
            return "";//  code.Escape(primitiveProperty.TypeUsage);
        }
         
    }

            ////اگر ویژگی مورد نظر کلید خارجی باشد  فیلد (سلکت ایتم لیست) به صورت مناسب پر می نمایید 
   public  string FillIEnumerableSelectListItemFild2(EdmProperty primitiveProperty,CodeGenerationTools code,string entityName)
    {
        string strFillName= strFillName=code.Escape(primitiveProperty).Replace("Fk_","").Replace("FK_","");
        string result;
        if (code.Escape(primitiveProperty).Contains("Fk_")||code.Escape(primitiveProperty).Contains("FK_") )
        {
           result=   ToLSC(entityName)+"Contract.IEnumerable"+strFillName +"= _"+strFillName.ToLower() +"Service.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e"+  (NameFeild(GetEntityWithName(strFillName))) +"});";
        }//_userService
        else 
        {
            result= "";//  code.Escape(primitiveProperty.TypeUsage);
        }
        return result;
    }

                //var list =_categoryService.GetAll().ToList();
            //list.Add(new Category { Id = 0, Name = Resources.Culture_fa_IR.Please_Select_a_option });
//////inja@@@@@
////////
////////  Declare Template Private Properties.
////////
static System.Resources.ResourceManager ResourceManager
{
    get
    {
        if (_resourceManager == null)
        {
            System.Resources.ResourceManager resourceManager = new System.Resources.ResourceManager("System.Data.Entity.Design", typeof(System.Data.Entity.Design.MetadataItemCollectionFactory).Assembly);
            System.Threading.Interlocked.CompareExchange(ref _resourceManager, resourceManager, null);
        }
        return _resourceManager;
    }
}
static System.Resources.ResourceManager _resourceManager;

#>
<#+


private static string GetResourceString(string resourceName)
{
    return ResourceManager.GetString(resourceName,
         null); //  Take default culture.
}



private void VerifyTypeUniqueness()
{
    HashSet<string> hash = new HashSet<string>();
    IEnumerable<GlobalItem> allTypes = GetSourceSchemaTypes<GlobalItem>().Where(i => i is StructuralType || i is EntityContainer);

    foreach (GlobalItem type in allTypes)
    {
        if (!hash.Add(GetGlobalItemName(type)))
        {
            //  6034 is the error number used by System.Data.Entity.Design EntityClassGenerator.
            Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6034",
             String.Format(CultureInfo.CurrentCulture,
                GetResourceString("Template_DuplicateTopLevelType"),
             GetGlobalItemName(type))));
        }
    }
}

protected string GetGlobalItemName(GlobalItem item)
{
    if (item is EdmType)
    {
        //  EntityType or ComplexType.
        return ((EdmType)item).Name;
    }
    else
    {
        //  Must be an EntityContainer.
        return ((EntityContainer)item).Name;
    }
}



void ApplyUserSettings(UserSettings userSettings)
{
    //  Setup template UserSettings.
    if (SourceCsdlPath == null)
    {
#if !PREPROCESSED_TEMPLATE
        if(userSettings.SourceCsdlPath == "$" + "edmxInputFile" + "$")
        {
            Errors.Add(new System.CodeDom.Compiler.CompilerError(Host.TemplateFile, 0, 0, "",
                GetResourceString("Template_ReplaceVsItemTemplateToken")));
            return;
        }

        SourceCsdlPath = Host.ResolvePath(userSettings.SourceCsdlPath);
#else
        SourceCsdlPath = userSettings.SourceCsdlPath;
#endif
    }

    // normalize the path, remove ..\ from it
    SourceCsdlPath = Path.GetFullPath(SourceCsdlPath);


    if (ReferenceCsdlPaths == null)
    {
        ReferenceCsdlPaths = userSettings.ReferenceCsdlPaths;
    }

    if (!CreateContextAddToMethods.HasValue)
    {
        CreateContextAddToMethods = userSettings.CreateContextAddToMethods;
    }

    DefaultSummaryComment = GetResourceString("Template_CommentNoDocumentation");
}


class UserSettings
{
    public string SourceCsdlPath{ get; set; }
    public string[] ReferenceCsdlPaths{ get; set; }
    public bool FullyQualifySystemTypes{ get; set; }
    public bool CreateContextAddToMethods{ get; set; }
    public bool CamelCaseFields{ get; set; }
}

string MultiSchemaEscape(TypeUsage usage, CodeGenerationTools code)
{
    StructuralType structural = usage.EdmType as StructuralType;
    if (structural != null)
    {
        return MultiSchemaEscape(structural, code);
    }
    return code.Escape(usage);
}

string MultiSchemaEscape(StructuralType type, CodeGenerationTools code)
{
    if (type.NamespaceName != ModelNamespace)
    {
        return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(type.NamespaceName)), code.Escape(type));
    }

    return code.Escape(type);
}

string NewModifier(NavigationProperty navigationProperty)
{
    Type baseType = typeof(EntityObject);
    return NewModifier(baseType, navigationProperty.Name);
}

string NewModifier(EdmFunction edmFunction)
{
    Type baseType = typeof(OnlineShopping);
    return NewModifier(baseType, edmFunction.Name);
}

string NewModifier(EntitySet set)
{
    Type baseType = typeof(OnlineShopping);
    return NewModifier(baseType, set.Name);
}

string NewModifier(EdmProperty property)
{
    Type baseType;
    if (property.DeclaringType.BuiltInTypeKind == BuiltInTypeKind.EntityType)
    {
        baseType = typeof(EntityObject);
    }
    else
    {
        baseType = typeof(ComplexObject);
    }
    return NewModifier(baseType, property.Name);
}

string NewModifier(Type type, string memberName)
{
    if (HasBaseMemberWithMatchingName(type, memberName))
    {
        return "new";
    }
    return string.Empty;
}

static bool HasBaseMemberWithMatchingName(Type type, string memberName)
{
    BindingFlags bindingFlags = BindingFlags.FlattenHierarchy | BindingFlags.NonPublic | BindingFlags.Public
                | BindingFlags.Instance | BindingFlags.Static;
    return type.GetMembers(bindingFlags).Where(m => IsVisibleMember(m)).Any(m => m.Name == memberName);
}

     public static string ToLSC( string str)
    {
        return (str.Substring(0,1).ToLower()+str.Substring(1,str.Length-1));
    }

string ChangingMethodName(EdmMember member)
{
    return string.Format(CultureInfo.InvariantCulture, "On{0}Changing", member.Name);
}

string ChangedMethodName(EdmMember member)
{
    return string.Format(CultureInfo.InvariantCulture, "On{0}Changed", member.Name);
}

string InitializedTrackingField(EdmProperty property, CodeGenerationTools code)
{
    string namePart = property.Name + "Initialized";
    if (code.CamelCaseFields)
    {
        namePart = code.CamelCase(namePart);
    }
    return "_" + namePart;
}

string OptionalNullableParameterForSetValidValue(EdmMember member, CodeGenerationTools code)
{
    MetadataTools ef = new MetadataTools(this);
    string list = string.Empty;
    if (((PrimitiveType)member.TypeUsage.EdmType).ClrEquivalentType.IsClass)
    {
        MetadataProperty storeGeneratedPatternProperty = null;
        bool isNullable = ef.IsNullable(member.TypeUsage) ||
            (member.MetadataProperties.TryGetValue(MetadataConstants.EDM_ANNOTATION_09_02 + ":StoreGeneratedPattern", false, out storeGeneratedPatternProperty) &&
             Object.Equals(storeGeneratedPatternProperty.Value, "Computed"));
        list += ", " + code.CreateLiteral(isNullable);
    }
    return list;
}

static bool IsVisibleMember(MemberInfo memberInfo)
{
    if (memberInfo is EventInfo)
    {
        EventInfo ei = (EventInfo)memberInfo;
        MethodInfo add = ei.GetAddMethod();
        MethodInfo remove = ei.GetRemoveMethod();
        return IsVisibleMethod(add) || IsVisibleMethod(remove);
    }
    else if (memberInfo is FieldInfo)
    {
        FieldInfo fi = (FieldInfo)memberInfo;
        return !fi.IsPrivate && !fi.IsAssembly;
    }
    else if (memberInfo is MethodBase)
    {
        MethodBase mb = (MethodBase)memberInfo;
        if (mb.IsSpecialName)
            return false;
        return IsVisibleMethod(mb);
    }
    else if (memberInfo is PropertyInfo)
    {
        PropertyInfo pi = (PropertyInfo)memberInfo;
        MethodInfo get = pi.GetGetMethod();
        MethodInfo set = pi.GetSetMethod();
        return IsVisibleMethod(get) || IsVisibleMethod(set);
    }

    return false;
}

static bool IsVisibleMethod(MethodBase methodBase)
{
    if (methodBase == null)
        return false;

    return !methodBase.IsPrivate && !methodBase.IsAssembly;
}

IEnumerable<T> GetSourceSchemaTypes<T>() where T : GlobalItem
{
    if (Path.GetExtension(SourceCsdlPath) != ".edmx")
    {
        return ItemCollection.GetItems<T>().Where(e => e.MetadataProperties.Any(mp => mp.Name == "SchemaSource" && (string)mp.Value == SourceCsdlPath));
    }
    else
    {
        return ItemCollection.GetItems<T>();
    }
}

string EndName(AssociationType association, int index)
{
    return association.AssociationEndMembers[index].Name;
}

string EndMultiplicity(AssociationType association, int index, CodeGenerationTools code)
{
    return code.CreateLiteral(association.AssociationEndMembers[index].RelationshipMultiplicity);
}

string EscapeEndTypeName(AssociationType association, int index, CodeGenerationTools code)
{
    EntityType entity = association.AssociationEndMembers[index].GetEntityType();
    return code.CreateFullName(code.EscapeNamespace(GetObjectNamespace(entity.NamespaceName)), code.Escape(entity));
}

string GetObjectNamespace(string csdlNamespaceName)
{
    string objectNamespace;
    if (EdmToObjectNamespaceMap.TryGetValue(csdlNamespaceName, out objectNamespace))
    {
        return objectNamespace;
    }

    return csdlNamespaceName;
}

void UpdateObjectNamespaceMap(string objectNamespace)
{
	if(objectNamespace != ModelNamespace && !EdmToObjectNamespaceMap.ContainsKey(ModelNamespace))
	{
		EdmToObjectNamespaceMap.Add(ModelNamespace, objectNamespace);	
	}
}

static string FixParameterName(string name, CodeGenerationTools code)
{
    //  Change any property that is 'id' (case insensitive) to 'ID'
    //  since 'iD' is a violation of FxCop rules.
    if (StringComparer.OrdinalIgnoreCase.Equals(name, "id"))
    {
        //  Return all lower case since it is an abbreviation, not an acronym.
        return "id";
    }
    return code.CamelCase(name);
}

string BaseTypeName(EntityType entity, CodeGenerationTools code)
{
    return entity.BaseType == null ? "EntityObject" : MultiSchemaEscape((StructuralType)entity.BaseType, code);
}

bool IncludePropertyInFactoryMethod(StructuralType factoryType, EdmProperty edmProperty)
{
    if (edmProperty.Nullable)
    {
        return false;
    }

    if (edmProperty.DefaultValue != null)
    {
        return false;
    }

    if ((Accessibility.ForReadOnlyProperty(edmProperty) != "public" && Accessibility.ForWriteOnlyProperty(edmProperty) != "public") ||
        (factoryType != edmProperty.DeclaringType && Accessibility.ForWriteOnlyProperty(edmProperty) == "private")
       )
    {
        //  There is no public part to the property.
        return false;
    }

    return true;
}


class FactoryMethodParameter
{
    public EdmProperty Source;
    public string RawParameterName;
    public string ParameterName;
    public string ParameterType;
    public string ParameterComment;
    public bool IsComplexType;

    public static IEnumerable<FactoryMethodParameter> CreateParameters(IEnumerable<EdmProperty> properties, UniqueIdentifierService unique, Func<TypeUsage, CodeGenerationTools, string> multiSchemaEscape, CodeGenerationTools code)
    {
        List<FactoryMethodParameter> parameters = new List<FactoryMethodParameter>();
        foreach (EdmProperty property in properties)
        {
            FactoryMethodParameter parameter = new FactoryMethodParameter();
            parameter.Source = property;
            parameter.IsComplexType = property.TypeUsage.EdmType is ComplexType;
            parameter.RawParameterName = unique.AdjustIdentifier(FixParameterName(property.Name, code));
            parameter.ParameterName = code.Escape(parameter.RawParameterName);
            parameter.ParameterType = multiSchemaEscape(property.TypeUsage, code);
            parameter.ParameterComment = String.Format(CultureInfo.CurrentCulture, GetResourceString("Template_CommentFactoryMethodParam"), property.Name);
            parameters.Add(parameter);
        }

        return parameters;
    }
}

string DefaultSummaryComment{ get; set; }

string SummaryComment(MetadataItem item)
{
    if (item.Documentation != null && item.Documentation.Summary != null)
    {
        return PrefixLinesOfMultilineComment(XMLCOMMENT_START + " ", XmlEntityize(item.Documentation.Summary));
    }

    if (DefaultSummaryComment != null)
    {
        return DefaultSummaryComment;
    }

    return string.Empty;
}

string LongDescriptionCommentElement(MetadataItem item, int indentLevel)
{
    if (item.Documentation != null && !String.IsNullOrEmpty(item.Documentation.LongDescription))
    {
        string comment = Environment.NewLine;
        string lineStart = CodeRegion.GetIndent(indentLevel) + XMLCOMMENT_START + " ";
        comment += lineStart + "<LongDescription>" + Environment.NewLine;
        comment += lineStart + PrefixLinesOfMultilineComment(lineStart, XmlEntityize(item.Documentation.LongDescription)) + Environment.NewLine;
        comment += lineStart + "</LongDescription>";
        return comment;
    }
    return string.Empty;
}

string PrefixLinesOfMultilineComment(string prefix, string comment)
{
    return comment.Replace(Environment.NewLine, Environment.NewLine + prefix);
}

string ParameterComments(IEnumerable<Tuple<string, string>> parameters, int indentLevel)
{
    System.Text.StringBuilder builder = new System.Text.StringBuilder();
    foreach (Tuple<string, string> parameter in parameters)
    {
        builder.AppendLine();
        builder.Append(CodeRegion.GetIndent(indentLevel));
        builder.Append(XMLCOMMENT_START);
        builder.Append(String.Format(CultureInfo.InvariantCulture, " <param name=\"{0}\">{1}</param>", parameter.Item1, parameter.Item2));
    }
    return builder.ToString();
}

string XmlEntityize(string text)
{
    if (string.IsNullOrEmpty(text))
    {
        return string.Empty;
    }

    text = text.Replace("&","&amp;");
    text = text.Replace("<","&lt;").Replace(">","&gt;");
    string id = Guid.NewGuid().ToString();
    text = text.Replace(Environment.NewLine, id);
    text = text.Replace("\r", "&#xD;").Replace("\n","&#xA;");
    text = text.Replace(id, Environment.NewLine);
    return text.Replace("\'","&apos;").Replace("\"","&quot;");
}

const string XMLCOMMENT_START = "///";
IEnumerable<EdmProperty> GetProperties(StructuralType type)
{
    if (type.BuiltInTypeKind == BuiltInTypeKind.EntityType)
    {
        return ((EntityType)type).Properties;
    }
    else
    {
        return ((ComplexType)type).Properties;
    }
}

protected void VerifyGetterAndSetterAccessibilityCompatability(EdmMember member)
{
    string rawGetterAccessibility = Accessibility.ForReadOnlyProperty(member);
    string rawSetterAccessibility = Accessibility.ForWriteOnlyProperty(member);

    if ((rawGetterAccessibility == "internal" && rawSetterAccessibility ==   "protected") ||
        (rawGetterAccessibility == "protected" && rawSetterAccessibility == "internal"))

    {
           Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6033", String.Format(CultureInfo.CurrentCulture,
                   GetResourceString("GeneratedPropertyAccessibilityConflict"),
                       member.Name, rawGetterAccessibility, rawSetterAccessibility)));
    }
}

private void VerifyEntityTypeAndSetAccessibilityCompatability(EntitySet set)
{
    string typeAccess = Accessibility.ForType(set.ElementType);
    string setAccess = Accessibility.ForReadOnlyProperty(set);

    if(typeAccess == "internal" && (setAccess == "public" || setAccess == "protected"))
    {
       Errors.Add(new System.CodeDom.Compiler.CompilerError(SourceCsdlPath, -1, -1, "6036", String.Format(CultureInfo.CurrentCulture,
               GetResourceString("EntityTypeAndSetAccessibilityConflict"),
                   set.ElementType.Name, typeAccess, set.Name, setAccess)));
    }
}

////////
////////  UniqueIdentifierService
////////
sealed class UniqueIdentifierService
{
    private readonly HashSet<string> _knownIdentifiers;

    public UniqueIdentifierService()
    {
        _knownIdentifiers = new HashSet<string>(StringComparer.Ordinal);
    }

    /// <summary>
    ///  Makes the supplied identifier  unique within the scope by adding
    ///  a suffix (1, 2, 3, ...), and returns the unique identifier.
    /// </summary>
    public string AdjustIdentifier(string identifier)
    {
        //  find a unique name by adding suffix as necessary
        var numberOfConflicts = 0;
        var adjustedIdentifier = identifier;

        while (!_knownIdentifiers.Add(adjustedIdentifier))
        {
            ++numberOfConflicts;
            adjustedIdentifier = identifier + numberOfConflicts.ToString(CultureInfo.InvariantCulture);
        }

        return adjustedIdentifier;
    }
}


        /// <summary>
    /// If the passed in TypeUsage has an EdmType that is a PrimitiveType, this method returns
    /// the corosponding Type object, otherwise it returns the Type object for Object.
    /// </summary>
    public Type ClrType(TypeUsage typeUsage)
    {
        if (typeUsage.EdmType is PrimitiveType)
        {
            return ((PrimitiveType)typeUsage.EdmType).ClrEquivalentType;
        }

        return typeof(object);
    }
#>
<#+
public void SetValidation(EdmProperty primitiveProperty,MetadataTools ef)
    {
           if (ef.ClrType(primitiveProperty.TypeUsage) == typeof(string ))
        {
          
  #>
 [StringLength(  <#= primitiveProperty.TypeUsage.Facets["MaxLength"].Value.ToString() #>,ErrorMessage= "Maximum length string: <#= primitiveProperty.TypeUsage.Facets["MaxLength"].Value.ToString() #> " )]<#+    
        }

    }
 #>

<#+
            ///در صورت داشتن پدر ای بی اس  پر کردن فیلدهای ارث بری شده از پدر کانترکت جاری با مپر پدر انجام می گیرد 
        public  void  ReturnInheritancAbsFieldFill(EntityType entity)
    {
         foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity))
        {
           
            if (navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One && navProperty.Name.Contains("Abs_"))
            {  #>
               var <#=ToLSC(navProperty.ToEndMember.Name)#>Maper = new <#=navProperty.ToEndMember.Name#>Maper();
                if (<#=ToLSC(entity.Name)#>.<#=navProperty.ToEndMember.Name#> == null) <#=ToLSC(entity.Name)#>.<#=navProperty.ToEndMember.Name#> = new <#=navProperty.ToEndMember.Name#>();
               <#=ToLSC(navProperty.ToEndMember.Name)#>Maper.EntityToContract(<#=ToLSC(entity.Name)#>.<#=navProperty.ToEndMember.Name#>, <#=  ToLSC(entity.Name)#>Contract);
<#+

            }
     }
        
    }
 #>

<#+
            ///در صورت داشتن پدر ای بی اس  پر کردن فیلدهای ارث بری شده از پدر کانترکت جاری با مپر پدر انجام می گیرد 
        public  void  ReturnInheritancAbsFieldWithFormCollec(EntityType entity)
    {
         foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity))
        {
           
            if (navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One && navProperty.Name.Contains("Abs_"))
            {  #>
        var <#= ToLSC(navProperty.ToEndMember.Name)#>Maper = new <#=  navProperty.ToEndMember.Name#>Maper();
               <#=  ToLSC(entity.Name)#>.<#=navProperty.ToEndMember.Name#> =<#=ToLSC(navProperty.ToEndMember.Name)#>Maper.FormCollectionToEntity(formCollection);
<#+
            }
     }
        
    }
 #>

<#+
            ///در صورت داشتن پدر ای بی اس  پر کردن فیلدهای ارث بری شده از پدر کانترکت جاری با مپر پدر انجام می گیرد 
        public  void  ReturnInheritancAbsFieldWithFormCollec2(EntityType entity)
    {
         foreach (NavigationProperty navProperty in entity.NavigationProperties.Where(n => n.DeclaringType == entity))
        {
           
            if (navProperty.FromEndMember.RelationshipMultiplicity == RelationshipMultiplicity.ZeroOrOne && navProperty.ToEndMember.RelationshipMultiplicity == RelationshipMultiplicity.One && navProperty.Name.Contains("Abs_"))
            { 
 #>
       var <#= ToLSC(navProperty.ToEndMember.Name)#>Maper = new <#=  navProperty.ToEndMember.Name#>Maper();
               <#=  ToLSC(entity.Name)#>.<#=navProperty.ToEndMember.Name#> =<#=ToLSC(navProperty.ToEndMember.Name)#>Maper.FormCollectionToEntity(formCollection,<#=  ToLSC(entity.Name)#>.<#=   navProperty.ToEndMember.Name#>);
<#+
            }
     }
        
    }
 #>
