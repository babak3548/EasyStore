


//------------------------------------------------------------------------------
// <auto-generated>
// by mehrang 
// </auto-generated>
//------------------------------------------------------------------------------

using System;

using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;

using DataLayer;
using System.Collections.Generic;

using System.Linq;
using DataLayer.Contract;
using Utility;
using DataLayer.Enums;
using DataLayer.EF;
using Microsoft.AspNetCore.Http;
using ServiceLayer;
//Bridge_BusinessOwner_MarketerMaper
namespace UILayer.Maper
{
    public partial class CommentMaper : BaseMaper<Comment, CommentContract>
    {
        //private FiledService _filedService;

        // private RoleService _roleService;
        public CommentMaper(OnlineShopping objectContext)
        {
            // _filedService = new FiledService(objectContext);

            //_roleService = new RoleService(objectContext);
        }

        public override void EntityToEntity(Comment srcEntity, Comment desEntity)
        {
            throw new NotImplementedException();
        }

        public override CommentContract EntityToContract(Comment Entity)
        {
            throw new NotImplementedException();
        }

        public override CommentContract EntityToContract(Comment Entity, CommentContract Contract)
        {
            throw new NotImplementedException();
        }

        public override Comment FormCollectionToEntity(FormCollection formCollection)
        {
            throw new NotImplementedException();
        }

        public override Comment FormCollectionToEntity(FormCollection formCollection, Comment Entity)
        {
            throw new NotImplementedException();
        }
    }
    //BridgeProvinceBusinessOwnerrMaper
    public partial class Bridge_BusinessOwner_MarketerMaper : BaseMaper<BridgeBusinessOwnerMarketer, Bridge_BusinessOwner_MarketerContract>
    {
        //private FiledService _filedService;

        // private RoleService _roleService;
        public Bridge_BusinessOwner_MarketerMaper(OnlineShopping objectContext)
        {
            // _filedService = new FiledService(objectContext);

            //_roleService = new RoleService(objectContext);
        }


        public override void EntityToEntity(BridgeBusinessOwnerMarketer srcEntity, BridgeBusinessOwnerMarketer desEntity)
        {
            throw new NotImplementedException();
        }

        public override Bridge_BusinessOwner_MarketerContract EntityToContract(BridgeBusinessOwnerMarketer Entity)
        {
            throw new NotImplementedException();
        }

        public override Bridge_BusinessOwner_MarketerContract EntityToContract(BridgeBusinessOwnerMarketer Entity, Bridge_BusinessOwner_MarketerContract Contract)
        {
            throw new NotImplementedException();
        }

        public override BridgeBusinessOwnerMarketer FormCollectionToEntity(FormCollection formCollection)
        {
            throw new NotImplementedException();
        }

        public override BridgeBusinessOwnerMarketer FormCollectionToEntity(FormCollection formCollection, BridgeBusinessOwnerMarketer Entity)
        {
            throw new NotImplementedException();
        }
    }
    //Bridge_BusinessOwner_MarketerMaper
    public partial class Bridge_Province_BusinessOwnerMaper : BaseMaper<BridgeProvinceBusinessOwner, Bridge_Province_BusinessOwnerContract>
    {
        //private FiledService _filedService;

        // private RoleService _roleService;
        public Bridge_Province_BusinessOwnerMaper(OnlineShopping objectContext)
        {
            // _filedService = new FiledService(objectContext);

            //_roleService = new RoleService(objectContext);
        }

        /*

                public override void EntityToEntity(Access srcEntity, Access desEntity)
                {
                    desEntity.Id = srcEntity.Id;
                    desEntity.DisplayMode = srcEntity.DisplayMode;
                    desEntity.FkRole = srcEntity.FkRole;
                    desEntity.FkFiled = srcEntity.FkFiled;
                }



                /// <summary>  
                /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
                /// </summary>
                /// <param name=""></param>
                /// <returns></returns>
                public override AccessContract EntityToContract(Access access)
                {
                    var accessContract = new AccessContract()
                    {

                        Id = access.Id,


                        DisplayMode = access.DisplayMode,


                        Role = access.Role != null ? access.Role.Name : null,
                        IEnumerableRole = _roleService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
                        FkRole = access.FkRole,

                        Filed = access.Filed != null ? access.Filed.Name : null,
                        IEnumerableFiled = _filedService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
                        FkFiled = access.FkFiled,
                    };
                    PartialMethodEntityToContract(ref  access, ref  accessContract);
                    return accessContract;
                }
                partial void PartialMethodEntityToContract(ref Access access, ref AccessContract accessContract);
                /// <summary>  
                /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
                /// </summary>
                /// <param name=""></param>
                /// <returns></returns>
                public override AccessContract EntityToContract(Access access, AccessContract accessContract)
                {


                    accessContract.Id = access.Id;


                    accessContract.DisplayMode = access.DisplayMode;


                    accessContract.Role = access.Role != null ? access.Role.Name : null;
                    accessContract.IEnumerableRole = _roleService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
                    accessContract.FkRole = access.FkRole;

                    accessContract.Filed = access.Filed != null ? access.Filed.Name : null;
                    accessContract.IEnumerableFiled = _filedService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
                    accessContract.FkFiled = access.FkFiled;

                    return accessContract;
                }
                /// <summary>  
                /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
                /// </summary>
                /// <param name=""></param>
                /// <returns></returns>
                public override Access FormCollectionToEntity(FormCollection formCollection)
                {
                    var access = new Access()
                    {
                        Id = Convert.ToInt32(formCollection["HiddenId"]),
                        DisplayMode = Convert.ToInt64(formCollection["DisplayMode"]),
                        FkRole = Convert.ToInt32(formCollection["IEnumerableRole"]),
                        FkFiled = Convert.ToInt32(formCollection["IEnumerableFiled"]),
                    };

                    return access;
                }

                /// <summary>  
                /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
                /// </summary>
                /// <param name=""></param>
                /// <returns></returns>
                public override Access FormCollectionToEntity(FormCollection formCollection, Access access)//دستی
                {
                    if (access == null) return this.FormCollectionToEntity(formCollection);

                    access.Id = (Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["HiddenId"]) : access.Id);


                    access.DisplayMode = (Convert.ToString(formCollection["DisplayMode"]) != ConstSetting.NoChenge ? Convert.ToInt64(formCollection["DisplayMode"]) : access.DisplayMode);



                    access.FkRole = (Convert.ToString(formCollection["IEnumerableRole"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableRole"]) : access.FkRole);



                    access.FkFiled = (Convert.ToString(formCollection["IEnumerableFiled"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableFiled"]) : access.FkFiled);


                    PartialMethodFormCollectionToEntity(ref formCollection, ref access);
                    return access;
                }
                partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection, ref Access access); */

        public override void EntityToEntity(BridgeProvinceBusinessOwner srcEntity, BridgeProvinceBusinessOwner desEntity)
        {
            throw new NotImplementedException();
        }

        public override Bridge_Province_BusinessOwnerContract EntityToContract(BridgeProvinceBusinessOwner Entity)
        {
            throw new NotImplementedException();
        }

        public override Bridge_Province_BusinessOwnerContract EntityToContract(BridgeProvinceBusinessOwner Entity, Bridge_Province_BusinessOwnerContract Contract)
        {
            throw new NotImplementedException();
        }

        public override BridgeProvinceBusinessOwner FormCollectionToEntity(FormCollection formCollection)
        {
            throw new NotImplementedException();
        }

        public override BridgeProvinceBusinessOwner FormCollectionToEntity(FormCollection formCollection, BridgeProvinceBusinessOwner Entity)
        {
            throw new NotImplementedException();
        }
    }


    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>

    public partial class AccountingMaper : BaseMaper<Accounting, AccountingContract>
    {

        private InvoiceService _invoiceService;

        private UserService _userService;
        public AccountingMaper(OnlineShopping objectContext)
        {
            _invoiceService = new InvoiceService(objectContext);
            _userService = new UserService(objectContext);

        }

        public override void EntityToEntity(Accounting srcEntity, Accounting desEntity)
        {
            desEntity.Id = srcEntity.Id;
            desEntity.Name = srcEntity.Name;
            desEntity.Debtor = srcEntity.Debtor;
            desEntity.Creditor = srcEntity.Creditor;
            desEntity.FkUser = srcEntity.FkUser;
       //     desEntity.FkPaymentLog = srcEntity.FkPaymentLog;
            desEntity.Date = srcEntity.Date;
        }




        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override AccountingContract EntityToContract(Accounting accounting)
        {
            var accountingContract = new AccountingContract()
            {

                Id = accounting.Id,


                Name = accounting.Name,


                Debtor = accounting.Debtor,


                Creditor = accounting.Creditor,


           //     User = accounting.FkUserNavigation != null ? accounting.FkUserNavigation.Birthday : null,
                IEnumerableUser = _userService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
                FK_User = accounting.FkUser,



            };
            PartialMethodEntityToContract(ref  accounting, ref  accountingContract);
            return accountingContract;
        }
        partial void PartialMethodEntityToContract(ref Accounting accounting, ref AccountingContract accountingContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override AccountingContract EntityToContract(Accounting accounting, AccountingContract accountingContract)
        {


            accountingContract.Id = accounting.Id;


            accountingContract.Name = accounting.Name;


            accountingContract.Debtor = accounting.Debtor;


            accountingContract.Creditor = accounting.Creditor;


           // accountingContract.User = accounting.FkUserNavigation != null ? accounting.FkUserNavigation.Birthday : null;
            accountingContract.IEnumerableUser = _userService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
            accountingContract.FK_User = accounting.FkUser;





            return accountingContract;
        }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Accounting FormCollectionToEntity(FormCollection formCollection)
        {
            var accounting = new Accounting()
            {
                Id = Convert.ToInt32(formCollection["HiddenId"]),
                Name = Convert.ToString(formCollection["Name"]),
                Debtor = Convert.ToDecimal(formCollection["Debtor"]),
                Creditor = Convert.ToDecimal(formCollection["Creditor"]),
                FkUser = Convert.ToInt32(formCollection["IEnumerableUser"]),
           //    FkPaymentLog = Convert.ToInt32(formCollection["IEnumerableInvoice"]),
  //
            };

            return accounting;
        }

        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Accounting FormCollectionToEntity(FormCollection formCollection, Accounting accounting)//دستی
        {
            if (accounting == null) return this.FormCollectionToEntity(formCollection);

            accounting.Id = (Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["HiddenId"]) : accounting.Id);


            accounting.Name = (Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Name"]) : accounting.Name);


            accounting.Debtor = (Convert.ToString(formCollection["Debtor"]) != ConstSetting.NoChenge ? Convert.ToDecimal(formCollection["Debtor"]) : accounting.Debtor);


            accounting.Creditor = (Convert.ToString(formCollection["Creditor"]) != ConstSetting.NoChenge ? Convert.ToDecimal(formCollection["Creditor"]) : accounting.Creditor);



            accounting.FkUser = (Convert.ToString(formCollection["IEnumerableUser"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableUser"]) : accounting.FkUser);



         //   accounting.FkPaymentLog = (Convert.ToString(formCollection["IEnumerableInvoice"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableInvoice"]) : accounting.FkPaymentLog);





            PartialMethodFormCollectionToEntity(ref formCollection, ref accounting);
            return accounting;
        }
        partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection, ref Accounting accounting);
    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>

    public partial class Bridge_Invoice_ProductMaper : BaseMaper<BridgeInvoiceProduct, Bridge_Invoice_ProductContract>
    {


        public override void EntityToEntity(BridgeInvoiceProduct srcEntity, BridgeInvoiceProduct desEntity)
        {
            desEntity.Id = srcEntity.Id;
            desEntity.Count = srcEntity.Count;
            desEntity.FkProduct = srcEntity.FkProduct;
            desEntity.FkInvoice = srcEntity.FkInvoice;
            // desEntity.FkMarketer = srcEntity.FkMarketer;

            //desEntity.Comment = srcEntity.Comment;
        }




        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Bridge_Invoice_ProductContract EntityToContract(BridgeInvoiceProduct bridge_Invoice_Product)
        {
            var bridge_Invoice_ProductContract = new Bridge_Invoice_ProductContract()
            {

                Id = bridge_Invoice_Product.Id,


                Count = bridge_Invoice_Product.Count,


                Product = bridge_Invoice_Product.FkProductNavigation != null ? bridge_Invoice_Product.FkProductNavigation.Name : null,
                IEnumerableProduct = _productService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
                FK_Product = bridge_Invoice_Product.FkProduct,

  
                FK_Invoice = bridge_Invoice_Product.FkInvoice,

                //  Marketer = bridge_Invoice_Product.Marketer != null ? bridge_Invoice_Product.Marketer.Name : null,
                //   IEnumerableMarketer = _marketerService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
                //  FkMarketer = bridge_Invoice_Product.FkMarketer,




                //   Comment = bridge_Invoice_Product.Comment,

            };
            PartialMethodEntityToContract(ref  bridge_Invoice_Product, ref  bridge_Invoice_ProductContract);
            return bridge_Invoice_ProductContract;
        }
        partial void PartialMethodEntityToContract(ref BridgeInvoiceProduct bridge_Invoice_Product, ref Bridge_Invoice_ProductContract bridge_Invoice_ProductContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Bridge_Invoice_ProductContract EntityToContract(BridgeInvoiceProduct bridge_Invoice_Product, Bridge_Invoice_ProductContract bridge_Invoice_ProductContract)
        {


            bridge_Invoice_ProductContract.Id = bridge_Invoice_Product.Id;


            bridge_Invoice_ProductContract.Count = bridge_Invoice_Product.Count;


            bridge_Invoice_ProductContract.Product = bridge_Invoice_Product.FkProductNavigation != null ? bridge_Invoice_Product.FkProductNavigation.Name : null;
            bridge_Invoice_ProductContract.IEnumerableProduct = _productService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
            bridge_Invoice_ProductContract.FK_Product = bridge_Invoice_Product.FkProduct;


            bridge_Invoice_ProductContract.FK_Invoice = bridge_Invoice_Product.FkInvoice;

            //  bridge_Invoice_ProductContract.Marketer = bridge_Invoice_Product.Marketer != null ? bridge_Invoice_Product.Marketer.Name : null;
            //  bridge_Invoice_ProductContract.IEnumerableMarketer = _marketerService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
            //bridge_Invoice_ProductContract.FkMarketer = bridge_Invoice_Product.FkMarketer;


            //  bridge_Invoice_ProductContract.Comment = bridge_Invoice_Product.Comment;


            return bridge_Invoice_ProductContract;
        }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override BridgeInvoiceProduct FormCollectionToEntity(FormCollection formCollection)
        {
            var bridge_Invoice_Product = new BridgeInvoiceProduct()
            {
                Id = Convert.ToInt32(formCollection["HiddenId"]),
                Count = Convert.ToInt32(formCollection["Count"]),
                FkProduct = Convert.ToInt32(formCollection["IEnumerableProduct"]),
                FkInvoice = Convert.ToInt32(formCollection["IEnumerableInvoice"]),
                //  FkMarketer = Convert.ToInt32(formCollection["IEnumerableMarketer"]),

                //  Comment = Convert.ToString(formCollection["Comment"]),
            };

            return bridge_Invoice_Product;
        }

        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override BridgeInvoiceProduct FormCollectionToEntity(FormCollection formCollection, BridgeInvoiceProduct bridge_Invoice_Product)//دستی
        {
            if (bridge_Invoice_Product == null) return this.FormCollectionToEntity(formCollection);

            bridge_Invoice_Product.Id = (Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["HiddenId"]) : bridge_Invoice_Product.Id);


            bridge_Invoice_Product.Count = (Convert.ToString(formCollection["Count"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["Count"]) : bridge_Invoice_Product.Count);



            bridge_Invoice_Product.FkProduct = (Convert.ToString(formCollection["IEnumerableProduct"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableProduct"]) : bridge_Invoice_Product.FkProduct);



            bridge_Invoice_Product.FkInvoice = (Convert.ToString(formCollection["IEnumerableInvoice"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableInvoice"]) : bridge_Invoice_Product.FkInvoice);



            // bridge_Invoice_Product.FkMarketer = (Convert.ToString(formCollection["IEnumerableMarketer"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableMarketer"]) : bridge_Invoice_Product.FkMarketer);


            //  bridge_Invoice_Product.Comment = (Convert.ToString(formCollection["Comment"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Comment"]) : bridge_Invoice_Product.Comment);


            PartialMethodFormCollectionToEntity(ref formCollection, ref bridge_Invoice_Product);
            return bridge_Invoice_Product;
        }
        partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection, ref BridgeInvoiceProduct bridge_Invoice_Product);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>

    public partial class BusinessOwnerMaper : BaseMaper<BusinessOwner, BusinessOwnerContract>
    {

        private UserService _userService;

        private ProvinceService _provinceService;

        private MarketerService _marketerService;



        public override void EntityToEntity(BusinessOwner srcEntity, BusinessOwner desEntity)
        {
            desEntity.Id = srcEntity.Id;
            desEntity.Name = srcEntity.Name;
            desEntity.TypeActivity = srcEntity.TypeActivity;
            // desEntity.BankAccunt = srcEntity.BankAccunt;
            //desEntity.BankName = srcEntity.BankName;
            desEntity.Address = srcEntity.Address;
            desEntity.NationalCode = srcEntity.NationalCode;
            desEntity.FkUser = srcEntity.FkUser;
            desEntity.FkProvince = srcEntity.FkProvince;
            desEntity.FkMarketer = srcEntity.FkMarketer;
            desEntity.DocumentFile = srcEntity.DocumentFile;
        }




        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override BusinessOwnerContract EntityToContract(BusinessOwner businessOwner)
        {
            var businessOwnerContract = new BusinessOwnerContract()
            {

                Id = businessOwner.Id,


                Name = businessOwner.Name,


                TypeActivity = businessOwner.TypeActivity,


                WordKey = businessOwner.WordKey,


                Active = businessOwner.Active,


                Address = businessOwner.Address,


                NationalCode = businessOwner.NationalCode,


              // User = businessOwner.FkUserNavigation != null ? businessOwner.FkUserNavigation.Birthday : null,
               // IEnumerableUser = _userService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
              //  FK_User = businessOwner.FkUser,

                Province = businessOwner.FkProvinceNavigation != null ? businessOwner.FkProvinceNavigation.Name : null,
               // IEnumerableProvince = _provinceService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
                FK_Province = businessOwner.FkProvince,

                Marketer = businessOwner.FkMarketerNavigation != null ? businessOwner.FkMarketerNavigation.Name : null,
                //IEnumerableMarketer = _marketerService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
                FK_Marketer = businessOwner.FkMarketer,

                DocumentFile = businessOwner.DocumentFile,
                Discription = businessOwner.Discription,

            };
            PartialMethodEntityToContract(ref  businessOwner, ref  businessOwnerContract);
            return businessOwnerContract;
        }
        partial void PartialMethodEntityToContract(ref BusinessOwner businessOwner, ref BusinessOwnerContract businessOwnerContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override BusinessOwnerContract EntityToContract(BusinessOwner businessOwner, BusinessOwnerContract businessOwnerContract)
        {


            businessOwnerContract.Id = businessOwner.Id;


            businessOwnerContract.Name = businessOwner.Name;


            businessOwnerContract.TypeActivity = businessOwner.TypeActivity;


            businessOwnerContract.WordKey = businessOwner.WordKey;


            businessOwnerContract.Active = businessOwner.Active;


            businessOwnerContract.Address = businessOwner.Address;


            businessOwnerContract.NationalCode = businessOwner.NationalCode;


            businessOwnerContract.User = businessOwner.FkUserNavigation  != null ? businessOwner.FkUserNavigation.Name : null;
         //   businessOwnerContract.IEnumerableUser = _userService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
            //businessOwnerContract.FK_User = businessOwner.FkUser;

            businessOwnerContract.Province = businessOwner.FkProvinceNavigation != null ? businessOwner.FkProvinceNavigation.Name : null;
        //    businessOwnerContract.IEnumerableProvince = _provinceService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
            businessOwnerContract.FK_Province = businessOwner.FkProvince;

            businessOwnerContract.Marketer = businessOwner.FkMarketerNavigation != null ? businessOwner.FkMarketerNavigation.Name : null;
           // businessOwnerContract.IEnumerableMarketer = _marketerService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
            businessOwnerContract.FK_Marketer = businessOwner.FkMarketer;

            businessOwnerContract.DocumentFile = businessOwner.DocumentFile;
            businessOwnerContract.Discription = businessOwner.Discription;


            return businessOwnerContract;
        }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override BusinessOwner FormCollectionToEntity(FormCollection formCollection)
        {
            var businessOwner = new BusinessOwner()
            {
                Id = Convert.ToInt32(formCollection["HiddenId"]),
                Name = Convert.ToString(formCollection["Name"]),
                TypeActivity = Convert.ToString(formCollection["TypeActivity"]),
                WordKey = Convert.ToString(formCollection["WordKey"]),
                Active = Convert.ToBoolean(formCollection["Active"]),
                Address = Convert.ToString(formCollection["Address"]),
                NationalCode = Convert.ToString(formCollection["NationalCode"]),
                FkUser = Convert.ToInt32(formCollection["IEnumerableUser"]),
                FkProvince = Convert.ToInt32(formCollection["IEnumerableProvince"]),
                FkMarketer = Convert.ToInt32(formCollection["IEnumerableMarketer"]),
                DocumentFile = Convert.ToString(formCollection["DocumentFile"]),
            };

            return businessOwner;
        }

        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override BusinessOwner FormCollectionToEntity(FormCollection formCollection, BusinessOwner businessOwner)//دستی
        {
            if (businessOwner == null) return this.FormCollectionToEntity(formCollection);

            businessOwner.Id = (Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["HiddenId"]) : businessOwner.Id);


            businessOwner.Name = (Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Name"]) : businessOwner.Name);


            businessOwner.TypeActivity = (Convert.ToString(formCollection["TypeActivity"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["TypeActivity"]) : businessOwner.TypeActivity);


            businessOwner.WordKey = (Convert.ToString(formCollection["WordKey"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["WordKey"]) : businessOwner.WordKey);


            businessOwner.Active = (businessOwner.Active);



            businessOwner.Address = (Convert.ToString(formCollection["Address"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Address"]) : businessOwner.Address);


            businessOwner.NationalCode = (Convert.ToString(formCollection["NationalCode"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["NationalCode"]) : businessOwner.NationalCode);



            businessOwner.FkUser = (Convert.ToString(formCollection["IEnumerableUser"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableUser"]) : businessOwner.FkUser);



            businessOwner.FkProvince = (Convert.ToString(formCollection["IEnumerableProvince"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableProvince"]) : businessOwner.FkProvince);



            businessOwner.FkMarketer = (Convert.ToString(formCollection["IEnumerableMarketer"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableMarketer"]) : businessOwner.FkMarketer);


            businessOwner.DocumentFile = (Convert.ToString(formCollection["DocumentFile"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["DocumentFile"]) : businessOwner.DocumentFile);


            PartialMethodFormCollectionToEntity(ref formCollection, ref businessOwner);
            return businessOwner;
        }
        partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection, ref BusinessOwner businessOwner);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>

    public partial class CategoryMaper : BaseMaper<Category, CategoryContract>
    {

        private CategoryService _categoryService;
        public CategoryMaper(OnlineShopping objectContext)
        {
            _categoryService = new CategoryService(objectContext);
        }

        public override void EntityToEntity(Category srcEntity, Category desEntity)
        {
            desEntity.Id = srcEntity.Id;
            desEntity.Name = srcEntity.Name;
            desEntity.Discription = srcEntity.Discription;
            desEntity.FkCategory = srcEntity.FkCategory;
        }




        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override CategoryContract EntityToContract(Category category)
        {
            var categoryContract = new CategoryContract()
            {

                Id = category.Id,


                Name = category.Name,


                Discription = category.Discription,


                Category = category.FkCategoryNavigation != null ? category.FkCategoryNavigation.Name : null,
                IEnumerableCategory = _categoryService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
                FK_Category = category.FkCategory,
            };
            PartialMethodEntityToContract(ref  category, ref  categoryContract);
            return categoryContract;
        }
        partial void PartialMethodEntityToContract(ref Category category, ref CategoryContract categoryContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override CategoryContract EntityToContract(Category category, CategoryContract categoryContract)
        {


            categoryContract.Id = category.Id;


            categoryContract.Name = category.Name;


            categoryContract.Discription = category.Discription;


            categoryContract.Category = category.FkCategoryNavigation != null ? category.FkCategoryNavigation.Name : null;
            categoryContract.IEnumerableCategory = _categoryService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
            categoryContract.FK_Category = category.FkCategory;

            return categoryContract;
        }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Category FormCollectionToEntity(FormCollection formCollection)
        {
            var category = new Category()
            {
                Id = Convert.ToInt32(formCollection["HiddenId"]),
                Name = Convert.ToString(formCollection["Name"]),
                Discription = Convert.ToString(formCollection["Discription"]),

                FkCategory = formCollection["IEnumerableCategory"].ToNullableInteger(),
            };

            return category;
        }

        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Category FormCollectionToEntity(FormCollection formCollection, Category category)//دستی
        {
            if (category == null) return this.FormCollectionToEntity(formCollection);

            category.Id = (Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["HiddenId"]) : category.Id);


            category.Name = (Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Name"]) : category.Name);


            category.Discription = (Convert.ToString(formCollection["Discription"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Discription"]) : category.Discription);



            category.FkCategory = (Convert.ToString(formCollection["IEnumerableCategory"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableCategory"]) : category.FkCategory);


            PartialMethodFormCollectionToEntity(ref formCollection, ref category);
            return category;
        }
        partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection, ref Category category);
    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>

    public partial class ContentMaper : BaseMaper<Content, ContentContract>
    {

      //  private EntityService _entityService;

      //  private RoleService _roleService;

        public ContentMaper(OnlineShopping objectContext)
        {
        //    _entityService = new EntityService(objectContext);

          //  _roleService = new RoleService(objectContext);
        }

        public override void EntityToEntity(Content srcEntity, Content desEntity)
        {
            desEntity.Id = srcEntity.Id;
            desEntity.Name = srcEntity.Name;
            desEntity.ShowValue = srcEntity.ShowValue;

            desEntity.Position = srcEntity.Position;
           // desEntity.ContentType = srcEntity.ContentType;

        }




        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override ContentContract EntityToContract(Content content)
        {
            var contentContract = new ContentContract()
            {

                Id = content.Id,


                Name = content.Name,


                ShowValue = content.ShowValue,



              //  Position = content.Position,




            //   ContentType = content.ContentType,


            };
            PartialMethodEntityToContract(ref  content, ref  contentContract);
            return contentContract;
        }
        partial void PartialMethodEntityToContract(ref Content content, ref ContentContract contentContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override ContentContract EntityToContract(Content content, ContentContract contentContract)
        {

            contentContract.Id = content.Id;


            contentContract.Name = content.Name;


            contentContract.ShowValue = content.ShowValue;


           // contentContract.Position = content.Position;


           // contentContract.ContentType = content.ContentType;


            return contentContract;
        }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Content FormCollectionToEntity(FormCollection formCollection)
        {
            var content = new Content()
            {
                Id = Convert.ToInt32(formCollection["HiddenId"]),
                Name = Convert.ToString(formCollection["Name"]),
                ShowValue = Convert.ToString(formCollection["ShowValue"]),
                Position = Convert.ToInt16(formCollection["Position"]),
               // ContentType = Convert.ToInt16(formCollection["ContentType"]),
            };

            return content;
        }

        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Content FormCollectionToEntity(FormCollection formCollection, Content content)//دستی
        {
            if (content == null) return this.FormCollectionToEntity(formCollection);

            content.Id = (Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["HiddenId"]) : content.Id);


            content.Name = (Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Name"]) : content.Name);


            content.ShowValue = (Convert.ToString(formCollection["ShowValue"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["ShowValue"]) : content.ShowValue);


            content.Position = (Convert.ToString(formCollection["Position"]) != ConstSetting.NoChenge ? Convert.ToInt16(formCollection["Position"]) : content.Position);




         //   content.ContentType = (Convert.ToString(formCollection["ContentType"]) != ConstSetting.NoChenge ? Convert.ToInt16(formCollection["ContentType"]) : content.ContentType);



            PartialMethodFormCollectionToEntity(ref formCollection, ref content);
            return content;
        }
        partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection, ref Content content);
    }


    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>

    public partial class InvoiceMaper : BaseMaper<Invoice, InvoiceContract>
    {

        private BusinessOwnerService _businessownerService;

        private UserService _userService;



        public override void EntityToEntity(Invoice srcEntity, Invoice desEntity)
        {
            desEntity.Id = srcEntity.Id;

            desEntity.RegisterDate = srcEntity.RegisterDate;
            desEntity.Status = srcEntity.Status;
            desEntity.DeliveryAddress = srcEntity.DeliveryAddress;
            desEntity.TotalSumProductPrice = srcEntity.TotalSumProductPrice;
            desEntity.Discount = srcEntity.Discount;
            desEntity.ShippingCost = srcEntity.ShippingCost;
            desEntity.PaymentToCountinue = srcEntity.PaymentToCountinue;
            desEntity.PaymentToCountinue = srcEntity.PaymentToCountinue;
            desEntity.FkUser = srcEntity.FkUser;
            desEntity.FkBusinessOwner = srcEntity.FkBusinessOwner;

        }




        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override InvoiceContract EntityToContract(Invoice invoice)
        {
            var invoiceContract = new InvoiceContract()
            {

                Id = invoice.Id,




 

                DeliveryAddress = invoice.DeliveryAddress,


                MoneySum = invoice.TotalSumProductPrice,


                Discount = invoice.Discount,


                Shipping = invoice.ShippingCost,


                PaymentSum = invoice.PaymentToCountinue,


                PaymentToCountinue = invoice.PaymentToCountinue,


              //  User = invoice.FkUserNavigation != null ? invoice.FkUserNavigation.Birthday : null,
                IEnumerableUser = _userService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
                FK_User = invoice.FkUser,

                BusinessOwner = invoice.FkBusinessOwnerNavigation != null ? invoice.FkBusinessOwnerNavigation.Name : null,
                IEnumerableBusinessOwner = _businessownerService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
                FK_BusinessOwner = invoice.FkBusinessOwner,

  

            };
            PartialMethodEntityToContract(ref  invoice, ref  invoiceContract);
            return invoiceContract;
        }
        partial void PartialMethodEntityToContract(ref Invoice invoice, ref InvoiceContract invoiceContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override InvoiceContract EntityToContract(Invoice invoice, InvoiceContract invoiceContract)
        {


            invoiceContract.Id = invoice.Id;





            invoiceContract.DeliveryAddress = invoice.DeliveryAddress;


            invoiceContract.MoneySum = invoice.TotalSumProductPrice;


            invoiceContract.Discount = invoice.Discount;


            invoiceContract.Shipping = invoice.ShippingCost;


            invoiceContract.PaymentSum = invoice.PaymentToCountinue;


            invoiceContract.PaymentToCountinue = invoice.PaymentToCountinue;


          //  invoiceContract.User = invoice.FkUserNavigation != null ? invoice.FkUserNavigation.Birthday : null;
            invoiceContract.IEnumerableUser = _userService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
            invoiceContract.FK_User = invoice.FkUser;

            invoiceContract.BusinessOwner = invoice.FkBusinessOwnerNavigation != null ? invoice.FkBusinessOwnerNavigation.Name : null;
            invoiceContract.IEnumerableBusinessOwner = _businessownerService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
            invoiceContract.FK_BusinessOwner = invoice.FkBusinessOwner;

      


            return invoiceContract;
        }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Invoice FormCollectionToEntity(FormCollection formCollection)
        {
            var invoice = new Invoice()
            {
                Id = Convert.ToInt32(formCollection["HiddenId"]),
   
                DeliveryAddress = Convert.ToString(formCollection["DeliveryAddress"]),
                TotalSumProductPrice = Convert.ToDecimal(formCollection["MoneySum"]),
                Discount = Convert.ToDecimal(formCollection["Discount"]),
                ShippingCost = Convert.ToDecimal(formCollection["Shipping"]),
                PaymentToCountinue = Convert.ToDecimal(formCollection["PaymentSum"]),
    
                FkUser = Convert.ToInt32(formCollection["IEnumerableUser"]),
                FkBusinessOwner = Convert.ToInt32(formCollection["IEnumerableBusinessOwner"]),

            };

            return invoice;
        }

        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Invoice FormCollectionToEntity(FormCollection formCollection, Invoice invoice)//دستی
        {
            if (invoice == null) return this.FormCollectionToEntity(formCollection);

            invoice.Id = (Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["HiddenId"]) : invoice.Id);




            invoice.DeliveryAddress = (Convert.ToString(formCollection["DeliveryAddress"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["DeliveryAddress"]) : invoice.DeliveryAddress);


            invoice.TotalSumProductPrice = (Convert.ToString(formCollection["MoneySum"]) != ConstSetting.NoChenge ? Convert.ToDecimal(formCollection["MoneySum"]) : invoice.TotalSumProductPrice);


            invoice.Discount = (Convert.ToString(formCollection["Discount"]) != ConstSetting.NoChenge ? Convert.ToDecimal(formCollection["Discount"]) : invoice.Discount);


            invoice.ShippingCost = (Convert.ToString(formCollection["Shipping"]) != ConstSetting.NoChenge ? Convert.ToDecimal(formCollection["Shipping"]) : invoice.ShippingCost);


            invoice.PaymentToCountinue = (Convert.ToString(formCollection["PaymentSum"]) != ConstSetting.NoChenge ? Convert.ToDecimal(formCollection["PaymentSum"]) : invoice.PaymentToCountinue);


            invoice.PaymentToCountinue = (Convert.ToString(formCollection["PaymentToCountinue"]) != ConstSetting.NoChenge ? Convert.ToDecimal(formCollection["PaymentToCountinue"]) : invoice.PaymentToCountinue);



            invoice.FkUser = (Convert.ToString(formCollection["IEnumerableUser"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableUser"]) : invoice.FkUser);



            invoice.FkBusinessOwner = (Convert.ToString(formCollection["IEnumerableBusinessOwner"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableBusinessOwner"]) : invoice.FkBusinessOwner);




            PartialMethodFormCollectionToEntity(ref formCollection, ref invoice);
            return invoice;
        }
        partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection, ref Invoice invoice);
    }

    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>

    public partial class MarketerMaper : BaseMaper<Marketer, MarketerContract>
    {

       // private UserService _userService;

       // private MarketerService _marketerService;


        public override void EntityToEntity(Marketer srcEntity, Marketer desEntity)
        {
            desEntity.Id = srcEntity.Id;
            desEntity.Name = srcEntity.Name;
            desEntity.Specialty = srcEntity.Specialty;
            desEntity.WordKey = srcEntity.WordKey;
            desEntity.Active = srcEntity.Active;
            desEntity.Tel = srcEntity.Tel;
            desEntity.FkUser = srcEntity.FkUser;
            desEntity.FkMarketer = srcEntity.FkMarketer;
        }




        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override MarketerContract EntityToContract(Marketer marketer)
        {
            var marketerContract = new MarketerContract()
            {

                Id = marketer.Id,


                Name = marketer.Name,


                Specialty = marketer.Specialty,


                WordKey = marketer.WordKey,



                Active = marketer.Active,


                User = marketer.FkUserNavigation != null ? marketer.FkUserNavigation.Name : null,
              ///  IEnumerableUser = _userService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
                FK_User = marketer.FkUser,

                Marketer = marketer.FkMarketerNavigation != null ? marketer.FkMarketerNavigation.Name : null,
              //  IEnumerableMarketer = _marketerService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
                FK_Marketer = marketer.FkMarketer,
            };
            PartialMethodEntityToContract(ref  marketer, ref  marketerContract);
            return marketerContract;
        }
        partial void PartialMethodEntityToContract(ref Marketer marketer, ref MarketerContract marketerContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override MarketerContract EntityToContract(Marketer marketer, MarketerContract marketerContract)
        {


            marketerContract.Id = marketer.Id;


            marketerContract.Name = marketer.Name;


            marketerContract.Specialty = marketer.Specialty;


            marketerContract.WordKey = marketer.WordKey;


            marketerContract.Active = marketer.Active;



            marketerContract.User = marketer.FkUserNavigation != null ? marketer.FkUserNavigation.Name : null;
            //marketerContract.IEnumerableUser = _userService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
            marketerContract.FK_User = marketer.FkUser;

            marketerContract.Marketer = marketer.FkMarketerNavigation != null ? marketer.FkMarketerNavigation.Name : null;
           // marketerContract.IEnumerableMarketer = _marketerService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
            marketerContract.FK_Marketer = marketer.FkMarketer;

            return marketerContract;
        }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Marketer FormCollectionToEntity(FormCollection formCollection)
        {
            var marketer = new Marketer()
            {
                Id = Convert.ToInt32(formCollection["HiddenId"]),
                Name = Convert.ToString(formCollection["Name"]),
                Specialty = Convert.ToString(formCollection["Specialty"]),
                WordKey = Convert.ToString(formCollection["WordKey"]),
                Active = Convert.ToBoolean(formCollection["Active"]),
                FkUser = Convert.ToInt32(formCollection["IEnumerableUser"]),

                FkMarketer = formCollection["IEnumerableMarketer"].ToNullableInteger(),
            };

            return marketer;
        }

        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Marketer FormCollectionToEntity(FormCollection formCollection, Marketer marketer)//دستی
        {
            if (marketer == null) return this.FormCollectionToEntity(formCollection);

            marketer.Id = (Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["HiddenId"]) : marketer.Id);


            marketer.Name = (Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Name"]) : marketer.Name);


            marketer.Specialty = (Convert.ToString(formCollection["Specialty"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Specialty"]) : marketer.Specialty);


            marketer.WordKey = (Convert.ToString(formCollection["WordKey"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["WordKey"]) : marketer.WordKey);


            marketer.Active = (Convert.ToString(formCollection["Active"]) != ConstSetting.NoChenge ? Convert.ToBoolean(formCollection["Active"]) : marketer.Active);




            marketer.FkUser = (Convert.ToString(formCollection["IEnumerableUser"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableUser"]) : marketer.FkUser);



            marketer.FkMarketer = (Convert.ToString(formCollection["IEnumerableMarketer"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableMarketer"]) : marketer.FkMarketer);


            PartialMethodFormCollectionToEntity(ref formCollection, ref marketer);
            return marketer;
        }
        partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection, ref Marketer marketer);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>

    public partial class ProductMaper : BaseMaper<Product, ProductContract>
    {

        private BusinessOwnerService _businessownerService;

        public ProductMaper(OnlineShopping objectContext)
        {
            _businessownerService = new BusinessOwnerService(objectContext);
        }

        public override void EntityToEntity(Product srcEntity, Product desEntity)
        {
            desEntity.Id = srcEntity.Id;
            desEntity.Name = srcEntity.Name;
            desEntity.Brand = srcEntity.Brand;
            desEntity.Image = srcEntity.Image;
            desEntity.Image1 = srcEntity.Image1;
            desEntity.Image2 = srcEntity.Image2;
            desEntity.Price = srcEntity.Price;
            desEntity.RegisterDate = srcEntity.RegisterDate;
            desEntity.Discription = srcEntity.Discription;
            desEntity.FkBusinessOwner = srcEntity.FkBusinessOwner;
            desEntity.MadeInCountry = srcEntity.MadeInCountry;
            desEntity.CountPrice = srcEntity.CountPrice;
            desEntity.MinCountForPrice = srcEntity.MinCountForPrice;
            desEntity.Available = srcEntity.Available;
            desEntity.PersentMarkater = srcEntity.PersentMarkater;
            desEntity.AcceptReturnDay = srcEntity.AcceptReturnDay;
            desEntity.ShippingDiscription = srcEntity.ShippingDiscription;
            desEntity.WordKey = srcEntity.WordKey;
            desEntity.Active = srcEntity.Active;
            desEntity.Dimansion = srcEntity.Dimansion;
            desEntity.UnitBuy = srcEntity.UnitBuy;
            desEntity.WightUnitBuyWithKg = srcEntity.WightUnitBuyWithKg;
        }




        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override ProductContract EntityToContract(Product product)
        {
            var productContract = new ProductContract()
            {

                Id = product.Id,


                Name = product.Name,


                Brand = product.Brand,


                Image = product.Image,


                Image1 = product.Image1,


                Image2 = product.Image2,


                Price = product.Price,


                RegisterDate = product.RegisterDate,


                Discription = product.Discription,


                BusinessOwner = product.FkBusinessOwnerNavigation != null ? product.FkBusinessOwnerNavigation.Name : null,
                //IEnumerableBusinessOwner = _businessownerService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name }),
                FK_BusinessOwner = product.FkBusinessOwner,

                MadeInCountry = product.MadeInCountry,


                CountPrice = product.CountPrice,


                MinCountForPrice = product.MinCountForPrice,


                available = product.Available,


                PersentMarkater = product.PersentMarkater,


                AcceptReturnDay = product.AcceptReturnDay,


                ShippingDiscription = product.ShippingDiscription,


                WordKey = product.WordKey,
                Active = product.Active,


                Dimansion = product.Dimansion,
                UnitBuy = product.UnitBuy,
                wightUnitBuyWithKG = product.WightUnitBuyWithKg,



            };
            PartialMethodEntityToContract(ref  product, ref  productContract);
            return productContract;
        }
        partial void PartialMethodEntityToContract(ref Product product, ref ProductContract productContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override ProductContract EntityToContract(Product product, ProductContract productContract)
        {


            productContract.Id = product.Id;


            productContract.Name = product.Name;


            productContract.Brand = product.Brand;


            productContract.Image = product.Image;


            productContract.Image1 = product.Image1;


            productContract.Image2 = product.Image2;


            productContract.Price = product.Price;


            productContract.RegisterDate = product.RegisterDate;


            productContract.Discription = product.Discription;


            productContract.BusinessOwner = product.FkBusinessOwnerNavigation != null ? product.FkBusinessOwnerNavigation.Name : null;
            productContract.IEnumerableBusinessOwner = _businessownerService.GetAll().Select(e => new SelectListItem { Value = e.Id.ToString(), Text = e.Name });
            productContract.FK_BusinessOwner = product.FkBusinessOwner;

            productContract.MadeInCountry = product.MadeInCountry;


            productContract.CountPrice = product.CountPrice;


            productContract.MinCountForPrice = product.MinCountForPrice;


            productContract.available = product.Available;


            productContract.PersentMarkater = product.PersentMarkater;


            productContract.AcceptReturnDay = product.AcceptReturnDay;


            productContract.ShippingDiscription = product.ShippingDiscription;


            productContract.WordKey = product.WordKey;
            productContract.Active = product.Active;


           


            return productContract;
        }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Product FormCollectionToEntity(FormCollection formCollection)
        {
            var product = new Product()
            {
                Id = Convert.ToInt32(formCollection["HiddenId"]),
                Name = Convert.ToString(formCollection["Name"]),
                Brand = Convert.ToString(formCollection["Brand"]),
                Image = Convert.ToString(formCollection["Image"]),
                Image1 = Convert.ToString(formCollection["Image1"]),
                Image2 = Convert.ToString(formCollection["Image2"]),
                Price = Convert.ToDecimal(formCollection["Price"]),
                RegisterDate = Convert.ToString(formCollection["RegisterDate"]),
                Discription = Convert.ToString(formCollection["Discription"]),
                FkBusinessOwner = Convert.ToInt32(formCollection["IEnumerableBusinessOwner"]),
                MadeInCountry = Convert.ToString(formCollection["MadeInCountry"]),
                CountPrice = Convert.ToDecimal(formCollection["CountPrice"]),
                MinCountForPrice = Convert.ToInt32(formCollection["MinCountForPrice"]),
                Available = Convert.ToInt32(formCollection["available"]),
                PersentMarkater = Convert.ToSingle(formCollection["PersentMarkater"]),
                AcceptReturnDay = Convert.ToByte(formCollection["AcceptReturnDay"]),
                ShippingDiscription = Convert.ToString(formCollection["ShippingDiscription"]),
                WordKey = Convert.ToString(formCollection["WordKey"]),
                Active = Convert.ToBoolean(formCollection["Active"]),
                Dimansion = formCollection["Dimansion"],
            };

            return product;
        }

        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Product FormCollectionToEntity(FormCollection formCollection, Product product)//دستی
        {
            if (product == null) return this.FormCollectionToEntity(formCollection);

            product.Id = (Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["HiddenId"]) : product.Id);


            product.Name = (Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Name"]) : product.Name);


            product.Brand = (Convert.ToString(formCollection["Brand"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Brand"]) : product.Brand);


            product.Image = (Convert.ToString(formCollection["Image"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Image"]) : product.Image);


            product.Image1 = (Convert.ToString(formCollection["Image1"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Image1"]) : product.Image1);


            product.Image2 = (Convert.ToString(formCollection["Image2"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Image2"]) : product.Image2);


            product.Price = (Convert.ToString(formCollection["Price"]) != ConstSetting.NoChenge ? Convert.ToDecimal(formCollection["Price"]) : product.Price);


            product.RegisterDate = (Convert.ToString(formCollection["RegisterDate"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["RegisterDate"]) : product.RegisterDate);


            product.Discription = (Convert.ToString(formCollection["Discription"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Discription"]) : product.Discription);



            product.FkBusinessOwner = (Convert.ToString(formCollection["IEnumerableBusinessOwner"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableBusinessOwner"]) : product.FkBusinessOwner);


            product.MadeInCountry = (Convert.ToString(formCollection["MadeInCountry"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["MadeInCountry"]) : product.MadeInCountry);


            product.CountPrice = (Convert.ToString(formCollection["CountPrice"]) != ConstSetting.NoChenge ? Convert.ToDecimal(formCollection["CountPrice"]) : product.CountPrice);


            product.MinCountForPrice = (Convert.ToString(formCollection["MinCountForPrice"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["MinCountForPrice"]) : product.MinCountForPrice);


            product.Available = (Convert.ToString(formCollection["available"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["available"]) : product.Available);


            product.PersentMarkater = (Convert.ToString(formCollection["PersentMarkater"]) != ConstSetting.NoChenge ? Convert.ToSingle(formCollection["PersentMarkater"]) : product.PersentMarkater);


            product.AcceptReturnDay = (Convert.ToString(formCollection["AcceptReturnDay"]) != ConstSetting.NoChenge ? Convert.ToByte(formCollection["AcceptReturnDay"]) : product.AcceptReturnDay);


            product.ShippingDiscription = (Convert.ToString(formCollection["ShippingDiscription"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["ShippingDiscription"]) : product.ShippingDiscription);


            product.WordKey = (Convert.ToString(formCollection["WordKey"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["WordKey"]) : product.WordKey);
            product.Active = (Convert.ToString(formCollection["Active"]) != ConstSetting.NoChenge ? Convert.ToBoolean(formCollection["Active"]) : product.Active);


            product.Dimansion = product.Dimansion;


            PartialMethodFormCollectionToEntity(ref formCollection, ref product);
            return product;
        }
        partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection, ref Product product);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>

    public partial class ProvinceMaper : BaseMaper<Province, ProvinceContract>
    {

        public override void EntityToEntity(Province srcEntity, Province desEntity)
        {
            desEntity.Id = srcEntity.Id;
            desEntity.Name = srcEntity.Name;
            desEntity.Country = srcEntity.Country;
        }




        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override ProvinceContract EntityToContract(Province province)
        {
            var provinceContract = new ProvinceContract()
            {

                Id = province.Id,


                Name = province.Name,


                Country = province.Country,

            };
            PartialMethodEntityToContract(ref  province, ref  provinceContract);
            return provinceContract;
        }
        partial void PartialMethodEntityToContract(ref Province province, ref ProvinceContract provinceContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override ProvinceContract EntityToContract(Province province, ProvinceContract provinceContract)
        {


            provinceContract.Id = province.Id;


            provinceContract.Name = province.Name;


            provinceContract.Country = province.Country;


            return provinceContract;
        }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Province FormCollectionToEntity(FormCollection formCollection)
        {
            var province = new Province()
            {
                Id = Convert.ToInt32(formCollection["HiddenId"]),
                Name = Convert.ToString(formCollection["Name"]),
                Country = Convert.ToString(formCollection["country"]),
            };

            return province;
        }

        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Province FormCollectionToEntity(FormCollection formCollection, Province province)//دستی
        {
            if (province == null) return this.FormCollectionToEntity(formCollection);

            province.Id = (Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["HiddenId"]) : province.Id);


            province.Name = (Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Name"]) : province.Name);


            province.Country = (Convert.ToString(formCollection["country"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["country"]) : province.Country);


            PartialMethodFormCollectionToEntity(ref formCollection, ref province);
            return province;
        }
        partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection, ref Province province);
    }


    public partial class UserMaper : BaseMaper<User, UserContract>
    {

   


        public override void EntityToEntity(User srcEntity, User desEntity)
        {
            desEntity.Id = srcEntity.Id;
            desEntity.Birthday = srcEntity.Birthday;
            desEntity.Email = srcEntity.Email;
            desEntity.Mobile = srcEntity.Mobile;
            desEntity.RegisterDate = srcEntity.RegisterDate;
            desEntity.FkRole = srcEntity.FkRole;
            desEntity.IpComputerCreator = srcEntity.IpComputerCreator;
            desEntity.CurrentInvoice = srcEntity.CurrentInvoice;
            desEntity.Ative = srcEntity.Ative;
            desEntity.AtivationCode = srcEntity.AtivationCode;
            desEntity.Password = srcEntity.Password;
        }

        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override UserContract EntityToContract(User user)
        {
            var userContract = new UserContract()
            {

                Id = user.Id,


                Name = user.Name,


             


                Mobile = user.Mobile,


                RegisterDate = user.RegisterDate,

                FK_Role = user.FkRole,

                IpComputerCreator = user.IpComputerCreator,


               


                Ative = user.Ative,




                HaveNewMessage=user.MessageFkUserReceiverNavigation.Any(m => m.Readed == false),
        
                

            };
            PartialMethodEntityToContract(ref  user, ref  userContract);
            return userContract;
        }
        partial void PartialMethodEntityToContract(ref User user, ref UserContract userContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override UserContract EntityToContract(User user, UserContract userContract)
        {


            userContract.Id = user.Id;


            userContract.Name = user.Name;


         


            userContract.Mobile = user.Mobile;


            userContract.RegisterDate = user.RegisterDate;

            userContract.FK_Role = user.FkRole;

            userContract.IpComputerCreator = user.IpComputerCreator;


          


            userContract.Ative = user.Ative;





            return userContract;
        }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override User FormCollectionToEntity(FormCollection formCollection)
        {
            var user = new User()
            {
                Id = Convert.ToInt32(formCollection["HiddenId"]),
                Name = Convert.ToString(formCollection["Name"]),
                Email = Convert.ToString(formCollection["Email"]),
                Mobile = Convert.ToString(formCollection["Mobile"]),
                RegisterDate = Convert.ToString(formCollection["RegisterDate"]),
                FkRole = Convert.ToInt32(formCollection["IEnumerableRole"]),
                IpComputerCreator = Convert.ToString(formCollection["IpComputerCreator"]),
                CurrentInvoice = Convert.ToInt32(formCollection["CurrentInvoice"]),
                Ative = Convert.ToBoolean(formCollection["Ative"]),
                AtivationCode = Convert.ToString(formCollection["AtivationCode"]),
                Password = Convert.ToString(formCollection["Password"]),
            };

            return user;
        }

        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override User FormCollectionToEntity(FormCollection formCollection, User user)//دستی
        {
            if (user == null) return this.FormCollectionToEntity(formCollection);

            user.Id = (Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["HiddenId"]) : user.Id);


            user.Name = (Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Name"]) : user.Name);


            user.Email = (Convert.ToString(formCollection["Email"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Email"]) : user.Email);


            user.Mobile = (Convert.ToString(formCollection["Mobile"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Mobile"]) : user.Mobile);


            user.RegisterDate = (Convert.ToString(formCollection["RegisterDate"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["RegisterDate"]) : user.RegisterDate);



            user.FkRole = (Convert.ToString(formCollection["IEnumerableRole"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["IEnumerableRole"]) : user.FkRole);


            user.IpComputerCreator = (Convert.ToString(formCollection["IpComputer"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["IpComputer"]) : user.IpComputerCreator);


            user.CurrentInvoice = (Convert.ToString(formCollection["CurrentInvoice"]) != ConstSetting.NoChenge ? Convert.ToInt32(formCollection["CurrentInvoice"]) : user.CurrentInvoice);


            user.Ative = (Convert.ToString(formCollection["Ative"]) != ConstSetting.NoChenge ? Convert.ToBoolean(formCollection["Ative"]) : user.Ative);


            user.AtivationCode = (Convert.ToString(formCollection["AtivationCode"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["AtivationCode"]) : user.AtivationCode);


            user.Password = (Convert.ToString(formCollection["Password"]) != ConstSetting.NoChenge ? Convert.ToString(formCollection["Password"]) : user.Password);


            PartialMethodFormCollectionToEntity(ref formCollection, ref user);
            return user;
        }
        partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection, ref User user);
    }

    public partial class DisputeResolutionMaper : BaseMaper<DisputeResolution, DisputeResolutionContract>
    {

        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override DisputeResolutionContract EntityToContract(DisputeResolution DisputeResolution)
        {
            throw new NotImplementedException();
        }
        public override void EntityToEntity(DisputeResolution srcEntity, DisputeResolution desEntity)
        { throw new NotImplementedException(); }
        //public override DisputeResolutionContract EntityToContract(DisputeResolution Entity)
        //{ throw new NotImplementedException(); }

        public override DisputeResolutionContract EntityToContract(DisputeResolution Entity, DisputeResolutionContract Contract)
        { throw new NotImplementedException(); }

        public override DisputeResolution FormCollectionToEntity(FormCollection formCollection)
        { throw new NotImplementedException(); }

        public override DisputeResolution FormCollectionToEntity(FormCollection formCollection, DisputeResolution Entity)
        { throw new NotImplementedException(); }
    }


    public partial class MessageMaper : BaseMaper<Message, MessageContract>
    {

        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override MessageContract EntityToContract(Message Message)
        {
            throw new NotImplementedException();
        }
        public override void EntityToEntity(Message srcEntity, Message desEntity)
        { throw new NotImplementedException(); }
        //public override MessageContract EntityToContract(Message Entity)
        //{ throw new NotImplementedException(); }

        public override MessageContract EntityToContract(Message Entity, MessageContract Contract)
        { throw new NotImplementedException(); }

        public override Message FormCollectionToEntity(FormCollection formCollection)
        { throw new NotImplementedException(); }

        public override Message FormCollectionToEntity(FormCollection formCollection, Message Entity)
        { throw new NotImplementedException(); }
    }
}

