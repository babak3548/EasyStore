


//------------------------------------------------------------------------------
// <auto-generated>
// by mehrang 
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.ComponentModel.DataAnnotations;
using System.Web.Mvc;
using DataLayer;
using System.Collections.Generic;
using AnarSoft.ServiceLayer;
using System.Linq;
using DataLayer.Contract;
using Utility;
using DataLayer.Enums;

namespace AnarSoft.UILayer.Maper
{
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class AccessMaper : BaseMaper<Access,AccessContract>
    {
     
        private   FiledService  _filedService = new FiledService();
     
        private   RoleService  _roleService = new RoleService();
    
            public override void EntityToEntity(Access srcEntity, Access desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.DisplayMode =srcEntity.DisplayMode;
        desEntity.FK_Role =srcEntity.FK_Role;
        desEntity.FK_Filed =srcEntity.FK_Filed;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override AccessContract EntityToContract(Access access)
           {
               var accessContract= new AccessContract()
               {
     
                  Id =access.Id,
                   
     
                  DisplayMode =access.DisplayMode,
                   
     
                  Role =access.Role!=null ?access.Role.Name:null,
                  IEnumerableRole= _roleService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Role =access.FK_Role,
     
                  Filed =access.Filed!=null ?access.Filed.Name:null,
                  IEnumerableFiled= _filedService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Filed =access.FK_Filed,
               };
              PartialMethodEntityToContract(ref  access, ref  accessContract);
              return accessContract;
           }
             partial void PartialMethodEntityToContract(ref Access access, ref AccessContract accessContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override AccessContract EntityToContract(Access access,AccessContract accessContract)
           {
    
                   
                 accessContract.Id=access.Id;
                   
     
                 accessContract.DisplayMode=access.DisplayMode;
                   
     
                 accessContract.Role=access.Role != null ? access.Role.Name : null;
                  accessContract.IEnumerableRole= _roleService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 accessContract.FK_Role =access.FK_Role;
     
                 accessContract.Filed=access.Filed != null ? access.Filed.Name : null;
                  accessContract.IEnumerableFiled= _filedService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 accessContract.FK_Filed =access.FK_Filed;
               
             return accessContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Access FormCollectionToEntity(FormCollection formCollection)
           {
               var access=new Access()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                DisplayMode =Convert.ToInt64 (formCollection["DisplayMode"]) ,
                 FK_Role =Convert.ToInt32(formCollection["IEnumerableRole"]) ,
                 FK_Filed =Convert.ToInt32(formCollection["IEnumerableFiled"]) ,
               };
      
             return access;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Access FormCollectionToEntity(FormCollection formCollection,Access access)//دستی
           {
              if (access == null) return this.FormCollectionToEntity(formCollection );
        
               access.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : access.Id);
    
    
               access.DisplayMode =(Convert.ToString(formCollection["DisplayMode"]) != ConstSetting.NoChenge ? Convert.ToInt64 (formCollection["DisplayMode"]) : access.DisplayMode);
    
     
    
                access.FK_Role =(Convert.ToString(formCollection["IEnumerableRole"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableRole"]) :  access.FK_Role);
    
     
    
                access.FK_Filed =(Convert.ToString(formCollection["IEnumerableFiled"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableFiled"]) :  access.FK_Filed);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref access);
             return  access;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Access access);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class AccountingMaper : BaseMaper<Accounting,AccountingContract>
    {
     
        private   InvoiceService  _invoiceService = new InvoiceService();
     
        private   UserService  _userService = new UserService();
    
            public override void EntityToEntity(Accounting srcEntity, Accounting desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.Debtor =srcEntity.Debtor;
        desEntity.Creditor =srcEntity.Creditor;
        desEntity.FK_User =srcEntity.FK_User;
        desEntity.FK_Invoice =srcEntity.FK_Invoice;
        desEntity.Date =srcEntity.Date;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override AccountingContract EntityToContract(Accounting accounting)
           {
               var accountingContract= new AccountingContract()
               {
     
                  Id =accounting.Id,
                   
     
                  Name =accounting.Name,
                   
     
                  Debtor =accounting.Debtor,
                   
     
                  Creditor =accounting.Creditor,
                   
     
                  User =accounting.User!=null ?accounting.User.Name:null,
                  IEnumerableUser= _userService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_User =accounting.FK_User,
     
                  Invoice =accounting.Invoice!=null ?accounting.Invoice.Name:null,
                  IEnumerableInvoice= _invoiceService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Invoice =accounting.FK_Invoice,
     
                  Date =accounting.Date,
                   
               };
              PartialMethodEntityToContract(ref  accounting, ref  accountingContract);
              return accountingContract;
           }
             partial void PartialMethodEntityToContract(ref Accounting accounting, ref AccountingContract accountingContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override AccountingContract EntityToContract(Accounting accounting,AccountingContract accountingContract)
           {
    
                   
                 accountingContract.Id=accounting.Id;
                   
     
                 accountingContract.Name=accounting.Name;
                   
     
                 accountingContract.Debtor=accounting.Debtor;
                   
     
                 accountingContract.Creditor=accounting.Creditor;
                   
     
                 accountingContract.User=accounting.User != null ? accounting.User.Name : null;
                  accountingContract.IEnumerableUser= _userService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 accountingContract.FK_User =accounting.FK_User;
     
                 accountingContract.Invoice=accounting.Invoice != null ? accounting.Invoice.Name : null;
                  accountingContract.IEnumerableInvoice= _invoiceService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 accountingContract.FK_Invoice =accounting.FK_Invoice;
     
                 accountingContract.Date=accounting.Date;
                   
               
             return accountingContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Accounting FormCollectionToEntity(FormCollection formCollection)
           {
               var accounting=new Accounting()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                Debtor =Convert.ToDecimal (formCollection["Debtor"]) ,
                Creditor =Convert.ToDecimal (formCollection["Creditor"]) ,
                 FK_User =Convert.ToInt32(formCollection["IEnumerableUser"]) ,
                 FK_Invoice =Convert.ToInt32(formCollection["IEnumerableInvoice"]) ,
                Date =Convert.ToString (formCollection["Date"]) ,
               };
      
             return accounting;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Accounting FormCollectionToEntity(FormCollection formCollection,Accounting accounting)//دستی
           {
              if (accounting == null) return this.FormCollectionToEntity(formCollection );
        
               accounting.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : accounting.Id);
    
    
               accounting.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : accounting.Name);
    
    
               accounting.Debtor =(Convert.ToString(formCollection["Debtor"]) != ConstSetting.NoChenge ? Convert.ToDecimal (formCollection["Debtor"]) : accounting.Debtor);
    
    
               accounting.Creditor =(Convert.ToString(formCollection["Creditor"]) != ConstSetting.NoChenge ? Convert.ToDecimal (formCollection["Creditor"]) : accounting.Creditor);
    
     
    
                accounting.FK_User =(Convert.ToString(formCollection["IEnumerableUser"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableUser"]) :  accounting.FK_User);
    
     
    
                accounting.FK_Invoice =(Convert.ToString(formCollection["IEnumerableInvoice"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableInvoice"]) :  accounting.FK_Invoice);
    
    
               accounting.Date =(Convert.ToString(formCollection["Date"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Date"]) : accounting.Date);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref accounting);
             return  accounting;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Accounting accounting);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class Bridge_Category_ProductMaper : BaseMaper<Bridge_Category_Product,Bridge_Category_ProductContract>
    {
     
        private   CategoryService  _categoryService = new CategoryService();
     
        private   ProductService  _productService = new ProductService();
    
            public override void EntityToEntity(Bridge_Category_Product srcEntity, Bridge_Category_Product desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.FK_Category =srcEntity.FK_Category;
        desEntity.FK_Product =srcEntity.FK_Product;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Bridge_Category_ProductContract EntityToContract(Bridge_Category_Product bridge_Category_Product)
           {
               var bridge_Category_ProductContract= new Bridge_Category_ProductContract()
               {
     
                  Id =bridge_Category_Product.Id,
                   
     
                  Category =bridge_Category_Product.Category!=null ?bridge_Category_Product.Category.Name:null,
                  IEnumerableCategory= _categoryService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Category =bridge_Category_Product.FK_Category,
     
                  Product =bridge_Category_Product.Product!=null ?bridge_Category_Product.Product.Name:null,
                  IEnumerableProduct= _productService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Product =bridge_Category_Product.FK_Product,
               };
              PartialMethodEntityToContract(ref  bridge_Category_Product, ref  bridge_Category_ProductContract);
              return bridge_Category_ProductContract;
           }
             partial void PartialMethodEntityToContract(ref Bridge_Category_Product bridge_Category_Product, ref Bridge_Category_ProductContract bridge_Category_ProductContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Bridge_Category_ProductContract EntityToContract(Bridge_Category_Product bridge_Category_Product,Bridge_Category_ProductContract bridge_Category_ProductContract)
           {
    
                   
                 bridge_Category_ProductContract.Id=bridge_Category_Product.Id;
                   
     
                 bridge_Category_ProductContract.Category=bridge_Category_Product.Category != null ? bridge_Category_Product.Category.Name : null;
                  bridge_Category_ProductContract.IEnumerableCategory= _categoryService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 bridge_Category_ProductContract.FK_Category =bridge_Category_Product.FK_Category;
     
                 bridge_Category_ProductContract.Product=bridge_Category_Product.Product != null ? bridge_Category_Product.Product.Name : null;
                  bridge_Category_ProductContract.IEnumerableProduct= _productService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 bridge_Category_ProductContract.FK_Product =bridge_Category_Product.FK_Product;
               
             return bridge_Category_ProductContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Bridge_Category_Product FormCollectionToEntity(FormCollection formCollection)
           {
               var bridge_Category_Product=new Bridge_Category_Product()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                 FK_Category =Convert.ToInt32(formCollection["IEnumerableCategory"]) ,
                 FK_Product =Convert.ToInt32(formCollection["IEnumerableProduct"]) ,
               };
      
             return bridge_Category_Product;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Bridge_Category_Product FormCollectionToEntity(FormCollection formCollection,Bridge_Category_Product bridge_Category_Product)//دستی
           {
              if (bridge_Category_Product == null) return this.FormCollectionToEntity(formCollection );
        
               bridge_Category_Product.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : bridge_Category_Product.Id);
    
     
    
                bridge_Category_Product.FK_Category =(Convert.ToString(formCollection["IEnumerableCategory"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableCategory"]) :  bridge_Category_Product.FK_Category);
    
     
    
                bridge_Category_Product.FK_Product =(Convert.ToString(formCollection["IEnumerableProduct"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableProduct"]) :  bridge_Category_Product.FK_Product);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref bridge_Category_Product);
             return  bridge_Category_Product;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Bridge_Category_Product bridge_Category_Product);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class Bridge_Invoice_ProductMaper : BaseMaper<Bridge_Invoice_Product,Bridge_Invoice_ProductContract>
    {

    
            public override void EntityToEntity(Bridge_Invoice_Product srcEntity, Bridge_Invoice_Product desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Count =srcEntity.Count;
        desEntity.FK_Product =srcEntity.FK_Product;
        desEntity.FK_Invoice =srcEntity.FK_Invoice;
        desEntity.FK_Marketer =srcEntity.FK_Marketer;
        desEntity.LikeSell =srcEntity.LikeSell;
        desEntity.Comment =srcEntity.Comment;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Bridge_Invoice_ProductContract EntityToContract(Bridge_Invoice_Product bridge_Invoice_Product)
           {
               var bridge_Invoice_ProductContract= new Bridge_Invoice_ProductContract()
               {
     
                  Id =bridge_Invoice_Product.Id,
                   
     
                  Count =bridge_Invoice_Product.Count,
                   
     
                  Product =bridge_Invoice_Product.Product!=null ?bridge_Invoice_Product.Product.Name:null,
                  IEnumerableProduct= _productService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Product =bridge_Invoice_Product.FK_Product,
     
                  Invoice =bridge_Invoice_Product.Invoice!=null ?bridge_Invoice_Product.Invoice.Name:null,
                  IEnumerableInvoice= _invoiceService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Invoice =bridge_Invoice_Product.FK_Invoice,
     
                  Marketer =bridge_Invoice_Product.Marketer!=null ?bridge_Invoice_Product.Marketer.Name:null,
                  IEnumerableMarketer= _marketerService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Marketer =bridge_Invoice_Product.FK_Marketer,
     
                  LikeSell =bridge_Invoice_Product.LikeSell,
                   
     
                  Comment =bridge_Invoice_Product.Comment,
                   
               };
              PartialMethodEntityToContract(ref  bridge_Invoice_Product, ref  bridge_Invoice_ProductContract);
              return bridge_Invoice_ProductContract;
           }
             partial void PartialMethodEntityToContract(ref Bridge_Invoice_Product bridge_Invoice_Product, ref Bridge_Invoice_ProductContract bridge_Invoice_ProductContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Bridge_Invoice_ProductContract EntityToContract(Bridge_Invoice_Product bridge_Invoice_Product,Bridge_Invoice_ProductContract bridge_Invoice_ProductContract)
           {
    
                   
                 bridge_Invoice_ProductContract.Id=bridge_Invoice_Product.Id;
                   
     
                 bridge_Invoice_ProductContract.Count=bridge_Invoice_Product.Count;
                   
     
                 bridge_Invoice_ProductContract.Product=bridge_Invoice_Product.Product != null ? bridge_Invoice_Product.Product.Name : null;
                  bridge_Invoice_ProductContract.IEnumerableProduct= _productService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 bridge_Invoice_ProductContract.FK_Product =bridge_Invoice_Product.FK_Product;
     
                 bridge_Invoice_ProductContract.Invoice=bridge_Invoice_Product.Invoice != null ? bridge_Invoice_Product.Invoice.Name : null;
                  bridge_Invoice_ProductContract.IEnumerableInvoice= _invoiceService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 bridge_Invoice_ProductContract.FK_Invoice =bridge_Invoice_Product.FK_Invoice;
     
                 bridge_Invoice_ProductContract.Marketer=bridge_Invoice_Product.Marketer != null ? bridge_Invoice_Product.Marketer.Name : null;
                  bridge_Invoice_ProductContract.IEnumerableMarketer= _marketerService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 bridge_Invoice_ProductContract.FK_Marketer =bridge_Invoice_Product.FK_Marketer;
     
                 bridge_Invoice_ProductContract.LikeSell=bridge_Invoice_Product.LikeSell;
                   
     
                 bridge_Invoice_ProductContract.Comment=bridge_Invoice_Product.Comment;
                   
               
             return bridge_Invoice_ProductContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Bridge_Invoice_Product FormCollectionToEntity(FormCollection formCollection)
           {
               var bridge_Invoice_Product=new Bridge_Invoice_Product()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Count =Convert.ToInt32 (formCollection["Count"]) ,
                 FK_Product =Convert.ToInt32(formCollection["IEnumerableProduct"]) ,
                 FK_Invoice =Convert.ToInt32(formCollection["IEnumerableInvoice"]) ,
                 FK_Marketer =Convert.ToInt32(formCollection["IEnumerableMarketer"]) ,
                LikeSell =Convert.ToBoolean (formCollection["LikeSell"]) ,
                Comment =Convert.ToString (formCollection["Comment"]) ,
               };
      
             return bridge_Invoice_Product;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Bridge_Invoice_Product FormCollectionToEntity(FormCollection formCollection,Bridge_Invoice_Product bridge_Invoice_Product)//دستی
           {
              if (bridge_Invoice_Product == null) return this.FormCollectionToEntity(formCollection );
        
               bridge_Invoice_Product.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : bridge_Invoice_Product.Id);
    
    
               bridge_Invoice_Product.Count =(Convert.ToString(formCollection["Count"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["Count"]) : bridge_Invoice_Product.Count);
    
     
    
                bridge_Invoice_Product.FK_Product =(Convert.ToString(formCollection["IEnumerableProduct"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableProduct"]) :  bridge_Invoice_Product.FK_Product);
    
     
    
                bridge_Invoice_Product.FK_Invoice =(Convert.ToString(formCollection["IEnumerableInvoice"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableInvoice"]) :  bridge_Invoice_Product.FK_Invoice);
    
     
    
                bridge_Invoice_Product.FK_Marketer =(Convert.ToString(formCollection["IEnumerableMarketer"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableMarketer"]) :  bridge_Invoice_Product.FK_Marketer);
    
    
               bridge_Invoice_Product.LikeSell =(Convert.ToString(formCollection["LikeSell"]) != ConstSetting.NoChenge ? Convert.ToBoolean (formCollection["LikeSell"]) : bridge_Invoice_Product.LikeSell);
    
    
               bridge_Invoice_Product.Comment =(Convert.ToString(formCollection["Comment"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Comment"]) : bridge_Invoice_Product.Comment);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref bridge_Invoice_Product);
             return  bridge_Invoice_Product;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Bridge_Invoice_Product bridge_Invoice_Product);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class BusinessOwnerMaper : BaseMaper<BusinessOwner,BusinessOwnerContract>
    {
     
        private   UserService  _userService = new UserService();
     
        private   ProvinceService  _provinceService = new ProvinceService();
     
        private   MarketerService  _marketerService = new MarketerService();
    
            public override void EntityToEntity(BusinessOwner srcEntity, BusinessOwner desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.TypeActivity =srcEntity.TypeActivity;
        desEntity.BankAccunt =srcEntity.BankAccunt;
        desEntity.BankName =srcEntity.BankName;
        desEntity.Address =srcEntity.Address;
        desEntity.NationalCode =srcEntity.NationalCode;
        desEntity.FK_User =srcEntity.FK_User;
        desEntity.FK_Province =srcEntity.FK_Province;
        desEntity.FK_Marketer =srcEntity.FK_Marketer;
        desEntity.DocumentFile =srcEntity.DocumentFile;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override BusinessOwnerContract EntityToContract(BusinessOwner businessOwner)
           {
               var businessOwnerContract= new BusinessOwnerContract()
               {
     
                  Id =businessOwner.Id,
                   
     
                  Name =businessOwner.Name,
                   
     
                  TypeActivity =businessOwner.TypeActivity,
                   
     
                  BankAccunt =businessOwner.BankAccunt,
                   
     
                  BankName =businessOwner.BankName,
                   
     
                  Address =businessOwner.Address,
                   
     
                  NationalCode =businessOwner.NationalCode,
                   
     
                  User =businessOwner.User!=null ?businessOwner.User.Name:null,
                  IEnumerableUser= _userService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_User =businessOwner.FK_User,
     
                  Province =businessOwner.Province!=null ?businessOwner.Province.Name:null,
                  IEnumerableProvince= _provinceService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Province =businessOwner.FK_Province,
     
                  Marketer =businessOwner.Marketer!=null ?businessOwner.Marketer.Name:null,
                  IEnumerableMarketer= _marketerService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Marketer =businessOwner.FK_Marketer,
     
                  DocumentFile =businessOwner.DocumentFile,
                   
               };
              PartialMethodEntityToContract(ref  businessOwner, ref  businessOwnerContract);
              return businessOwnerContract;
           }
             partial void PartialMethodEntityToContract(ref BusinessOwner businessOwner, ref BusinessOwnerContract businessOwnerContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override BusinessOwnerContract EntityToContract(BusinessOwner businessOwner,BusinessOwnerContract businessOwnerContract)
           {
    
                   
                 businessOwnerContract.Id=businessOwner.Id;
                   
     
                 businessOwnerContract.Name=businessOwner.Name;
                   
     
                 businessOwnerContract.TypeActivity=businessOwner.TypeActivity;
                   
     
                 businessOwnerContract.BankAccunt=businessOwner.BankAccunt;
                   
     
                 businessOwnerContract.BankName=businessOwner.BankName;
                   
     
                 businessOwnerContract.Address=businessOwner.Address;
                   
     
                 businessOwnerContract.NationalCode=businessOwner.NationalCode;
                   
     
                 businessOwnerContract.User=businessOwner.User != null ? businessOwner.User.Name : null;
                  businessOwnerContract.IEnumerableUser= _userService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 businessOwnerContract.FK_User =businessOwner.FK_User;
     
                 businessOwnerContract.Province=businessOwner.Province != null ? businessOwner.Province.Name : null;
                  businessOwnerContract.IEnumerableProvince= _provinceService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 businessOwnerContract.FK_Province =businessOwner.FK_Province;
     
                 businessOwnerContract.Marketer=businessOwner.Marketer != null ? businessOwner.Marketer.Name : null;
                  businessOwnerContract.IEnumerableMarketer= _marketerService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 businessOwnerContract.FK_Marketer =businessOwner.FK_Marketer;
     
                 businessOwnerContract.DocumentFile=businessOwner.DocumentFile;
                   
               
             return businessOwnerContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override BusinessOwner FormCollectionToEntity(FormCollection formCollection)
           {
               var businessOwner=new BusinessOwner()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                TypeActivity =Convert.ToString (formCollection["TypeActivity"]) ,
                BankAccunt =Convert.ToString (formCollection["BankAccunt"]) ,
                BankName =Convert.ToString (formCollection["BankName"]) ,
                Address =Convert.ToString (formCollection["Address"]) ,
                NationalCode =Convert.ToString (formCollection["NationalCode"]) ,
                 FK_User =Convert.ToInt32(formCollection["IEnumerableUser"]) ,
                 FK_Province =Convert.ToInt32(formCollection["IEnumerableProvince"]) ,
                 FK_Marketer =Convert.ToInt32(formCollection["IEnumerableMarketer"]) ,
                DocumentFile =Convert.ToString (formCollection["DocumentFile"]) ,
               };
      
             return businessOwner;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override BusinessOwner FormCollectionToEntity(FormCollection formCollection,BusinessOwner businessOwner)//دستی
           {
              if (businessOwner == null) return this.FormCollectionToEntity(formCollection );
        
               businessOwner.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : businessOwner.Id);
    
    
               businessOwner.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : businessOwner.Name);
    
    
               businessOwner.TypeActivity =(Convert.ToString(formCollection["TypeActivity"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["TypeActivity"]) : businessOwner.TypeActivity);
    
    
               businessOwner.BankAccunt =(Convert.ToString(formCollection["BankAccunt"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["BankAccunt"]) : businessOwner.BankAccunt);
    
    
               businessOwner.BankName =(Convert.ToString(formCollection["BankName"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["BankName"]) : businessOwner.BankName);
    
    
               businessOwner.Address =(Convert.ToString(formCollection["Address"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Address"]) : businessOwner.Address);
    
    
               businessOwner.NationalCode =(Convert.ToString(formCollection["NationalCode"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["NationalCode"]) : businessOwner.NationalCode);
    
     
    
                businessOwner.FK_User =(Convert.ToString(formCollection["IEnumerableUser"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableUser"]) :  businessOwner.FK_User);
    
     
    
                businessOwner.FK_Province =(Convert.ToString(formCollection["IEnumerableProvince"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableProvince"]) :  businessOwner.FK_Province);
    
     
    
                businessOwner.FK_Marketer =(Convert.ToString(formCollection["IEnumerableMarketer"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableMarketer"]) :  businessOwner.FK_Marketer);
    
    
               businessOwner.DocumentFile =(Convert.ToString(formCollection["DocumentFile"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["DocumentFile"]) : businessOwner.DocumentFile);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref businessOwner);
             return  businessOwner;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref BusinessOwner businessOwner);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class CategoryMaper : BaseMaper<Category,CategoryContract>
    {
     
        private   CategoryService  _categoryService = new CategoryService();
    
            public override void EntityToEntity(Category srcEntity, Category desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.Discription =srcEntity.Discription;
        desEntity.FK_Category =srcEntity.FK_Category;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override CategoryContract EntityToContract(Category category)
           {
               var categoryContract= new CategoryContract()
               {
     
                  Id =category.Id,
                   
     
                  Name =category.Name,
                   
     
                  Discription =category.Discription,
                   
     
                  Category =category.Category2!=null ?category.Category2.Name:null,
                  IEnumerableCategory= _categoryService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Category =category.FK_Category,
               };
              PartialMethodEntityToContract(ref  category, ref  categoryContract);
              return categoryContract;
           }
             partial void PartialMethodEntityToContract(ref Category category, ref CategoryContract categoryContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override CategoryContract EntityToContract(Category category,CategoryContract categoryContract)
           {
    
                   
                 categoryContract.Id=category.Id;
                   
     
                 categoryContract.Name=category.Name;
                   
     
                 categoryContract.Discription=category.Discription;
                   
     
                 categoryContract.Category=category.Category2 != null ? category.Category2.Name : null;
                  categoryContract.IEnumerableCategory= _categoryService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 categoryContract.FK_Category =category.FK_Category;
               
             return categoryContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Category FormCollectionToEntity(FormCollection formCollection)
           {
               var category=new Category()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                Discription =Convert.ToString (formCollection["Discription"]) ,
     
              FK_Category =formCollection["IEnumerableCategory"].ToNullableInteger() ,   
               };
      
             return category;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Category FormCollectionToEntity(FormCollection formCollection,Category category)//دستی
           {
              if (category == null) return this.FormCollectionToEntity(formCollection );
        
               category.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : category.Id);
    
    
               category.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : category.Name);
    
    
               category.Discription =(Convert.ToString(formCollection["Discription"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Discription"]) : category.Discription);
    
     
    
                category.FK_Category =(Convert.ToString(formCollection["IEnumerableCategory"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableCategory"]) :  category.FK_Category);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref category);
             return  category;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Category category);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class CategorySettingMaper : BaseMaper<CategorySetting,CategorySettingContract>
    {
    
            public override void EntityToEntity(CategorySetting srcEntity, CategorySetting desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.GroupName =srcEntity.GroupName;
        desEntity.Discription =srcEntity.Discription;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override CategorySettingContract EntityToContract(CategorySetting categorySetting)
           {
               var categorySettingContract= new CategorySettingContract()
               {
     
                  Id =categorySetting.Id,
                   
     
                  Name =categorySetting.Name,
                   
     
                  GroupName =categorySetting.GroupName,
                   
     
                  Discription =categorySetting.Discription,
                   
               };
              PartialMethodEntityToContract(ref  categorySetting, ref  categorySettingContract);
              return categorySettingContract;
           }
             partial void PartialMethodEntityToContract(ref CategorySetting categorySetting, ref CategorySettingContract categorySettingContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override CategorySettingContract EntityToContract(CategorySetting categorySetting,CategorySettingContract categorySettingContract)
           {
    
                   
                 categorySettingContract.Id=categorySetting.Id;
                   
     
                 categorySettingContract.Name=categorySetting.Name;
                   
     
                 categorySettingContract.GroupName=categorySetting.GroupName;
                   
     
                 categorySettingContract.Discription=categorySetting.Discription;
                   
               
             return categorySettingContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override CategorySetting FormCollectionToEntity(FormCollection formCollection)
           {
               var categorySetting=new CategorySetting()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                GroupName =Convert.ToString (formCollection["GroupName"]) ,
                Discription =Convert.ToString (formCollection["Discription"]) ,
               };
      
             return categorySetting;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override CategorySetting FormCollectionToEntity(FormCollection formCollection,CategorySetting categorySetting)//دستی
           {
              if (categorySetting == null) return this.FormCollectionToEntity(formCollection );
        
               categorySetting.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : categorySetting.Id);
    
    
               categorySetting.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : categorySetting.Name);
    
    
               categorySetting.GroupName =(Convert.ToString(formCollection["GroupName"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["GroupName"]) : categorySetting.GroupName);
    
    
               categorySetting.Discription =(Convert.ToString(formCollection["Discription"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Discription"]) : categorySetting.Discription);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref categorySetting);
             return  categorySetting;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref CategorySetting categorySetting);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class ContentMaper : BaseMaper<Content,ContentContract>
    {
     
        private   EntityService  _entityService = new EntityService();
     
        private   RoleService  _roleService = new RoleService();
    
            public override void EntityToEntity(Content srcEntity, Content desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.ShowValue =srcEntity.ShowValue;
        desEntity.PartialType =srcEntity.PartialType;
        desEntity.Width =srcEntity.Width;
        desEntity.Position =srcEntity.Position;
        desEntity.priority =srcEntity.priority;
        desEntity.DisplayMode =srcEntity.DisplayMode;
        desEntity.FK_Role =srcEntity.FK_Role;
        desEntity.FK_Entity =srcEntity.FK_Entity;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override ContentContract EntityToContract(Content content)
           {
               var contentContract= new ContentContract()
               {
     
                  Id =content.Id,
                   
     
                  Name =content.Name,
                   
     
                  ShowValue =content.ShowValue,
                   
     
                  PartialType =content.PartialType,
                   
     
                  Width =content.Width,
                   
     
                  Position =content.Position,
                   
     
                  priority =content.priority,
                   
     
                  DisplayMode =content.DisplayMode,
                   
     
                  Role =content.Role!=null ?content.Role.Name:null,
                  IEnumerableRole= _roleService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Role =content.FK_Role,
     
                  Entity =content.Entity!=null ?content.Entity.Name:null,
                  IEnumerableEntity= _entityService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Entity =content.FK_Entity,
               };
              PartialMethodEntityToContract(ref  content, ref  contentContract);
              return contentContract;
           }
             partial void PartialMethodEntityToContract(ref Content content, ref ContentContract contentContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override ContentContract EntityToContract(Content content,ContentContract contentContract)
           {
    
                   
                 contentContract.Id=content.Id;
                   
     
                 contentContract.Name=content.Name;
                   
     
                 contentContract.ShowValue=content.ShowValue;
                   
     
                 contentContract.PartialType=content.PartialType;
                   
     
                 contentContract.Width=content.Width;
                   
     
                 contentContract.Position=content.Position;
                   
     
                 contentContract.priority=content.priority;
                   
     
                 contentContract.DisplayMode=content.DisplayMode;
                   
     
                 contentContract.Role=content.Role != null ? content.Role.Name : null;
                  contentContract.IEnumerableRole= _roleService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 contentContract.FK_Role =content.FK_Role;
     
                 contentContract.Entity=content.Entity != null ? content.Entity.Name : null;
                  contentContract.IEnumerableEntity= _entityService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 contentContract.FK_Entity =content.FK_Entity;
               
             return contentContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Content FormCollectionToEntity(FormCollection formCollection)
           {
               var content=new Content()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                ShowValue =Convert.ToString (formCollection["ShowValue"]) ,
                PartialType =Convert.ToString (formCollection["PartialType"]) ,
                Width =Convert.ToInt16 (formCollection["Width"]) ,
                Position =Convert.ToInt16 (formCollection["Position"]) ,
                priority =Convert.ToInt16 (formCollection["priority"]) ,
                DisplayMode =Convert.ToInt16 (formCollection["DisplayMode"]) ,
                 FK_Role =Convert.ToInt32(formCollection["IEnumerableRole"]) ,
                 FK_Entity =Convert.ToInt32(formCollection["IEnumerableEntity"]) ,
               };
      
             return content;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Content FormCollectionToEntity(FormCollection formCollection,Content content)//دستی
           {
              if (content == null) return this.FormCollectionToEntity(formCollection );
        
               content.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : content.Id);
    
    
               content.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : content.Name);
    
    
               content.ShowValue =(Convert.ToString(formCollection["ShowValue"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["ShowValue"]) : content.ShowValue);
    
    
               content.PartialType =(Convert.ToString(formCollection["PartialType"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["PartialType"]) : content.PartialType);
    
    
               content.Width =(Convert.ToString(formCollection["Width"]) != ConstSetting.NoChenge ? Convert.ToInt16 (formCollection["Width"]) : content.Width);
    
    
               content.Position =(Convert.ToString(formCollection["Position"]) != ConstSetting.NoChenge ? Convert.ToInt16 (formCollection["Position"]) : content.Position);
    
    
               content.priority =(Convert.ToString(formCollection["priority"]) != ConstSetting.NoChenge ? Convert.ToInt16 (formCollection["priority"]) : content.priority);
    
    
               content.DisplayMode =(Convert.ToString(formCollection["DisplayMode"]) != ConstSetting.NoChenge ? Convert.ToInt16 (formCollection["DisplayMode"]) : content.DisplayMode);
    
     
    
                content.FK_Role =(Convert.ToString(formCollection["IEnumerableRole"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableRole"]) :  content.FK_Role);
    
     
    
                content.FK_Entity =(Convert.ToString(formCollection["IEnumerableEntity"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableEntity"]) :  content.FK_Entity);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref content);
             return  content;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Content content);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class EntityMaper : BaseMaper<Entity,EntityContract>
    {
    
            public override void EntityToEntity(Entity srcEntity, Entity desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.PersianName =srcEntity.PersianName;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override EntityContract EntityToContract(Entity entity)
           {
               var entityContract= new EntityContract()
               {
     
                  Id =entity.Id,
                   
     
                  Name =entity.Name,
                   
     
                  PersianName =entity.PersianName,
                   
               };
              PartialMethodEntityToContract(ref  entity, ref  entityContract);
              return entityContract;
           }
             partial void PartialMethodEntityToContract(ref Entity entity, ref EntityContract entityContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override EntityContract EntityToContract(Entity entity,EntityContract entityContract)
           {
    
                   
                 entityContract.Id=entity.Id;
                   
     
                 entityContract.Name=entity.Name;
                   
     
                 entityContract.PersianName=entity.PersianName;
                   
               
             return entityContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Entity FormCollectionToEntity(FormCollection formCollection)
           {
               var entity=new Entity()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                PersianName =Convert.ToString (formCollection["PersianName"]) ,
               };
      
             return entity;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Entity FormCollectionToEntity(FormCollection formCollection,Entity entity)//دستی
           {
              if (entity == null) return this.FormCollectionToEntity(formCollection );
        
               entity.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : entity.Id);
    
    
               entity.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : entity.Name);
    
    
               entity.PersianName =(Convert.ToString(formCollection["PersianName"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["PersianName"]) : entity.PersianName);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref entity);
             return  entity;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Entity entity);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class FiledMaper : BaseMaper<Filed,FiledContract>
    {
     
        private   EntityService  _entityService = new EntityService();
    
            public override void EntityToEntity(Filed srcEntity, Filed desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.PartialType =srcEntity.PartialType;
        desEntity.OrderByValue =srcEntity.OrderByValue;
        desEntity.FK_Entity =srcEntity.FK_Entity;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override FiledContract EntityToContract(Filed filed)
           {
               var filedContract= new FiledContract()
               {
     
                  Id =filed.Id,
                   
     
                  Name =filed.Name,
                   
     
                  PartialType =filed.PartialType,
                   
     
                  OrderByValue =filed.OrderByValue,
                   
     
                  Entity =filed.Entity!=null ?filed.Entity.Name:null,
                  IEnumerableEntity= _entityService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Entity =filed.FK_Entity,
               };
              PartialMethodEntityToContract(ref  filed, ref  filedContract);
              return filedContract;
           }
             partial void PartialMethodEntityToContract(ref Filed filed, ref FiledContract filedContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override FiledContract EntityToContract(Filed filed,FiledContract filedContract)
           {
    
                   
                 filedContract.Id=filed.Id;
                   
     
                 filedContract.Name=filed.Name;
                   
     
                 filedContract.PartialType=filed.PartialType;
                   
     
                 filedContract.OrderByValue=filed.OrderByValue;
                   
     
                 filedContract.Entity=filed.Entity != null ? filed.Entity.Name : null;
                  filedContract.IEnumerableEntity= _entityService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 filedContract.FK_Entity =filed.FK_Entity;
               
             return filedContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Filed FormCollectionToEntity(FormCollection formCollection)
           {
               var filed=new Filed()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                PartialType =Convert.ToInt16 (formCollection["PartialType"]) ,
                OrderByValue =Convert.ToInt16 (formCollection["OrderByValue"]) ,
                 FK_Entity =Convert.ToInt32(formCollection["IEnumerableEntity"]) ,
               };
      
             return filed;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Filed FormCollectionToEntity(FormCollection formCollection,Filed filed)//دستی
           {
              if (filed == null) return this.FormCollectionToEntity(formCollection );
        
               filed.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : filed.Id);
    
    
               filed.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : filed.Name);
    
    
               filed.PartialType =(Convert.ToString(formCollection["PartialType"]) != ConstSetting.NoChenge ? Convert.ToInt16 (formCollection["PartialType"]) : filed.PartialType);
    
    
               filed.OrderByValue =(Convert.ToString(formCollection["OrderByValue"]) != ConstSetting.NoChenge ? Convert.ToInt16 (formCollection["OrderByValue"]) : filed.OrderByValue);
    
     
    
                filed.FK_Entity =(Convert.ToString(formCollection["IEnumerableEntity"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableEntity"]) :  filed.FK_Entity);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref filed);
             return  filed;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Filed filed);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class InvoiceMaper : BaseMaper<Invoice,InvoiceContract>
    {
     
        private   BusinessOwnerService  _businessownerService = new BusinessOwnerService();
     
        private   UserService  _userService = new UserService();
    
            public override void EntityToEntity(Invoice srcEntity, Invoice desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.Date =srcEntity.Date;
        desEntity.State =srcEntity.State;
        desEntity.DeliveryAddress =srcEntity.DeliveryAddress;
        desEntity.MoneySum =srcEntity.MoneySum;
        desEntity.Discount =srcEntity.Discount;
        desEntity.Shipping =srcEntity.Shipping;
        desEntity.PaymentSum =srcEntity.PaymentSum;
        desEntity.PaymentToCountinue =srcEntity.PaymentToCountinue;
        desEntity.FK_User =srcEntity.FK_User;
        desEntity.FK_BusinessOwner =srcEntity.FK_BusinessOwner;
        desEntity.type =srcEntity.type;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override InvoiceContract EntityToContract(Invoice invoice)
           {
               var invoiceContract= new InvoiceContract()
               {
     
                  Id =invoice.Id,
                   
     
                  Name =invoice.Name,
                   
     
                  Date =invoice.Date,
                   
     
                  State =invoice.State,
                   
     
                  DeliveryAddress =invoice.DeliveryAddress,
                   
     
                  MoneySum =invoice.MoneySum,
                   
     
                  Discount =invoice.Discount,
                   
     
                  Shipping =invoice.Shipping,
                   
     
                  PaymentSum =invoice.PaymentSum,
                   
     
                  PaymentToCountinue =invoice.PaymentToCountinue,
                   
     
                  User =invoice.User!=null ?invoice.User.Name:null,
                  IEnumerableUser= _userService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_User =invoice.FK_User,
     
                  BusinessOwner =invoice.BusinessOwner!=null ?invoice.BusinessOwner.Name:null,
                  IEnumerableBusinessOwner= _businessownerService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_BusinessOwner =invoice.FK_BusinessOwner,
     
                  type =invoice.type,
                   
               };
              PartialMethodEntityToContract(ref  invoice, ref  invoiceContract);
              return invoiceContract;
           }
             partial void PartialMethodEntityToContract(ref Invoice invoice, ref InvoiceContract invoiceContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override InvoiceContract EntityToContract(Invoice invoice,InvoiceContract invoiceContract)
           {
    
                   
                 invoiceContract.Id=invoice.Id;
                   
     
                 invoiceContract.Name=invoice.Name;
                   
     
                 invoiceContract.Date=invoice.Date;
                   
     
                 invoiceContract.State=invoice.State;
                   
     
                 invoiceContract.DeliveryAddress=invoice.DeliveryAddress;
                   
     
                 invoiceContract.MoneySum=invoice.MoneySum;
                   
     
                 invoiceContract.Discount=invoice.Discount;
                   
     
                 invoiceContract.Shipping=invoice.Shipping;
                   
     
                 invoiceContract.PaymentSum=invoice.PaymentSum;
                   
     
                 invoiceContract.PaymentToCountinue=invoice.PaymentToCountinue;
                   
     
                 invoiceContract.User=invoice.User != null ? invoice.User.Name : null;
                  invoiceContract.IEnumerableUser= _userService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 invoiceContract.FK_User =invoice.FK_User;
     
                 invoiceContract.BusinessOwner=invoice.BusinessOwner != null ? invoice.BusinessOwner.Name : null;
                  invoiceContract.IEnumerableBusinessOwner= _businessownerService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 invoiceContract.FK_BusinessOwner =invoice.FK_BusinessOwner;
     
                 invoiceContract.type=invoice.type;
                   
               
             return invoiceContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Invoice FormCollectionToEntity(FormCollection formCollection)
           {
               var invoice=new Invoice()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                Date =Convert.ToString (formCollection["Date"]) ,
                State =Convert.ToByte (formCollection["State"]) ,
                DeliveryAddress =Convert.ToString (formCollection["DeliveryAddress"]) ,
                MoneySum =Convert.ToDecimal (formCollection["MoneySum"]) ,
                Discount =Convert.ToDecimal (formCollection["Discount"]) ,
                Shipping =Convert.ToDecimal (formCollection["Shipping"]) ,
                PaymentSum =Convert.ToDecimal (formCollection["PaymentSum"]) ,
                PaymentToCountinue =Convert.ToDecimal (formCollection["PaymentToCountinue"]) ,
                 FK_User =Convert.ToInt32(formCollection["IEnumerableUser"]) ,
                 FK_BusinessOwner =Convert.ToInt32(formCollection["IEnumerableBusinessOwner"]) ,
                type =Convert.ToInt16 (formCollection["type"]) ,
               };
      
             return invoice;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Invoice FormCollectionToEntity(FormCollection formCollection,Invoice invoice)//دستی
           {
              if (invoice == null) return this.FormCollectionToEntity(formCollection );
        
               invoice.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : invoice.Id);
    
    
               invoice.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : invoice.Name);
    
    
               invoice.Date =(Convert.ToString(formCollection["Date"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Date"]) : invoice.Date);
    
    
               invoice.State =(Convert.ToString(formCollection["State"]) != ConstSetting.NoChenge ? Convert.ToByte (formCollection["State"]) : invoice.State);
    
    
               invoice.DeliveryAddress =(Convert.ToString(formCollection["DeliveryAddress"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["DeliveryAddress"]) : invoice.DeliveryAddress);
    
    
               invoice.MoneySum =(Convert.ToString(formCollection["MoneySum"]) != ConstSetting.NoChenge ? Convert.ToDecimal (formCollection["MoneySum"]) : invoice.MoneySum);
    
    
               invoice.Discount =(Convert.ToString(formCollection["Discount"]) != ConstSetting.NoChenge ? Convert.ToDecimal (formCollection["Discount"]) : invoice.Discount);
    
    
               invoice.Shipping =(Convert.ToString(formCollection["Shipping"]) != ConstSetting.NoChenge ? Convert.ToDecimal (formCollection["Shipping"]) : invoice.Shipping);
    
    
               invoice.PaymentSum =(Convert.ToString(formCollection["PaymentSum"]) != ConstSetting.NoChenge ? Convert.ToDecimal (formCollection["PaymentSum"]) : invoice.PaymentSum);
    
    
               invoice.PaymentToCountinue =(Convert.ToString(formCollection["PaymentToCountinue"]) != ConstSetting.NoChenge ? Convert.ToDecimal (formCollection["PaymentToCountinue"]) : invoice.PaymentToCountinue);
    
     
    
                invoice.FK_User =(Convert.ToString(formCollection["IEnumerableUser"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableUser"]) :  invoice.FK_User);
    
     
    
                invoice.FK_BusinessOwner =(Convert.ToString(formCollection["IEnumerableBusinessOwner"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableBusinessOwner"]) :  invoice.FK_BusinessOwner);
    
    
               invoice.type =(Convert.ToString(formCollection["type"]) != ConstSetting.NoChenge ? Convert.ToInt16 (formCollection["type"]) : invoice.type);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref invoice);
             return  invoice;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Invoice invoice);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class LangugeMaper : BaseMaper<Languge,LangugeContract>
    {
     
        private   FiledService  _filedService = new FiledService();
    
            public override void EntityToEntity(Languge srcEntity, Languge desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.Value =srcEntity.Value;
        desEntity.Title =srcEntity.Title;
        desEntity.FK_Filed =srcEntity.FK_Filed;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override LangugeContract EntityToContract(Languge languge)
           {
               var langugeContract= new LangugeContract()
               {
     
                  Id =languge.Id,
                   
     
                  Name =languge.Name,
                   
     
                  Value =languge.Value,
                   
     
                  Title =languge.Title,
                   
     
                  Filed =languge.Filed!=null ?languge.Filed.Name:null,
                  IEnumerableFiled= _filedService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Filed =languge.FK_Filed,
               };
              PartialMethodEntityToContract(ref  languge, ref  langugeContract);
              return langugeContract;
           }
             partial void PartialMethodEntityToContract(ref Languge languge, ref LangugeContract langugeContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override LangugeContract EntityToContract(Languge languge,LangugeContract langugeContract)
           {
    
                   
                 langugeContract.Id=languge.Id;
                   
     
                 langugeContract.Name=languge.Name;
                   
     
                 langugeContract.Value=languge.Value;
                   
     
                 langugeContract.Title=languge.Title;
                   
     
                 langugeContract.Filed=languge.Filed != null ? languge.Filed.Name : null;
                  langugeContract.IEnumerableFiled= _filedService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 langugeContract.FK_Filed =languge.FK_Filed;
               
             return langugeContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Languge FormCollectionToEntity(FormCollection formCollection)
           {
               var languge=new Languge()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                Value =Convert.ToString (formCollection["Value"]) ,
                Title =Convert.ToString (formCollection["Title"]) ,
                 FK_Filed =Convert.ToInt32(formCollection["IEnumerableFiled"]) ,
               };
      
             return languge;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Languge FormCollectionToEntity(FormCollection formCollection,Languge languge)//دستی
           {
              if (languge == null) return this.FormCollectionToEntity(formCollection );
        
               languge.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : languge.Id);
    
    
               languge.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : languge.Name);
    
    
               languge.Value =(Convert.ToString(formCollection["Value"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Value"]) : languge.Value);
    
    
               languge.Title =(Convert.ToString(formCollection["Title"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Title"]) : languge.Title);
    
     
    
                languge.FK_Filed =(Convert.ToString(formCollection["IEnumerableFiled"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableFiled"]) :  languge.FK_Filed);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref languge);
             return  languge;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Languge languge);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class MarketerMaper : BaseMaper<Marketer,MarketerContract>
    {
     
        private   UserService  _userService = new UserService();
     
        private   MarketerService  _marketerService = new MarketerService();
    
            public override void EntityToEntity(Marketer srcEntity, Marketer desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.Specialty =srcEntity.Specialty;
        desEntity.BankAccunt =srcEntity.BankAccunt;
        desEntity.BankName =srcEntity.BankName;
        desEntity.FK_User =srcEntity.FK_User;
        desEntity.FK_Marketer =srcEntity.FK_Marketer;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override MarketerContract EntityToContract(Marketer marketer)
           {
               var marketerContract= new MarketerContract()
               {
     
                  Id =marketer.Id,
                   
     
                  Name =marketer.Name,
                   
     
                  Specialty =marketer.Specialty,
                   
     
                  BankAccunt =marketer.BankAccunt,
                   
     
                  BankName =marketer.BankName,
                   
     
                  User =marketer.User!=null ?marketer.User.Name:null,
                  IEnumerableUser= _userService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_User =marketer.FK_User,
     
                  Marketer =marketer.Marketer2!=null ?marketer.Marketer2.Name:null,
                  IEnumerableMarketer= _marketerService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Marketer =marketer.FK_Marketer,
               };
              PartialMethodEntityToContract(ref  marketer, ref  marketerContract);
              return marketerContract;
           }
             partial void PartialMethodEntityToContract(ref Marketer marketer, ref MarketerContract marketerContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override MarketerContract EntityToContract(Marketer marketer,MarketerContract marketerContract)
           {
    
                   
                 marketerContract.Id=marketer.Id;
                   
     
                 marketerContract.Name=marketer.Name;
                   
     
                 marketerContract.Specialty=marketer.Specialty;
                   
     
                 marketerContract.BankAccunt=marketer.BankAccunt;
                   
     
                 marketerContract.BankName=marketer.BankName;
                   
     
                 marketerContract.User=marketer.User != null ? marketer.User.Name : null;
                  marketerContract.IEnumerableUser= _userService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 marketerContract.FK_User =marketer.FK_User;
     
                 marketerContract.Marketer=marketer.Marketer2 != null ? marketer.Marketer2.Name : null;
                  marketerContract.IEnumerableMarketer= _marketerService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 marketerContract.FK_Marketer =marketer.FK_Marketer;
               
             return marketerContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Marketer FormCollectionToEntity(FormCollection formCollection)
           {
               var marketer=new Marketer()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                Specialty =Convert.ToString (formCollection["Specialty"]) ,
                BankAccunt =Convert.ToString (formCollection["BankAccunt"]) ,
                BankName =Convert.ToString (formCollection["BankName"]) ,
                 FK_User =Convert.ToInt32(formCollection["IEnumerableUser"]) ,
     
              FK_Marketer =formCollection["IEnumerableMarketer"].ToNullableInteger() ,   
               };
      
             return marketer;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Marketer FormCollectionToEntity(FormCollection formCollection,Marketer marketer)//دستی
           {
              if (marketer == null) return this.FormCollectionToEntity(formCollection );
        
               marketer.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : marketer.Id);
    
    
               marketer.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : marketer.Name);
    
    
               marketer.Specialty =(Convert.ToString(formCollection["Specialty"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Specialty"]) : marketer.Specialty);
    
    
               marketer.BankAccunt =(Convert.ToString(formCollection["BankAccunt"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["BankAccunt"]) : marketer.BankAccunt);
    
    
               marketer.BankName =(Convert.ToString(formCollection["BankName"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["BankName"]) : marketer.BankName);
    
     
    
                marketer.FK_User =(Convert.ToString(formCollection["IEnumerableUser"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableUser"]) :  marketer.FK_User);
    
     
    
                marketer.FK_Marketer =(Convert.ToString(formCollection["IEnumerableMarketer"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableMarketer"]) :  marketer.FK_Marketer);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref marketer);
             return  marketer;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Marketer marketer);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class ProductMaper : BaseMaper<Product,ProductContract>
    {
     
        private   BusinessOwnerService  _businessownerService = new BusinessOwnerService();
    
            public override void EntityToEntity(Product srcEntity, Product desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.Brand =srcEntity.Brand;
        desEntity.Image =srcEntity.Image;
        desEntity.Image1 =srcEntity.Image1;
        desEntity.Image2 =srcEntity.Image2;
        desEntity.Price =srcEntity.Price;
        desEntity.RegisterDate =srcEntity.RegisterDate;
        desEntity.Discription =srcEntity.Discription;
        desEntity.FK_BusinessOwner =srcEntity.FK_BusinessOwner;
        desEntity.MadeInCountry =srcEntity.MadeInCountry;
        desEntity.CountPrice =srcEntity.CountPrice;
        desEntity.MinCountForPrice =srcEntity.MinCountForPrice;
        desEntity.available =srcEntity.available;
        desEntity.PersentMarkater =srcEntity.PersentMarkater;
        desEntity.AcceptReturnDay =srcEntity.AcceptReturnDay;
        desEntity.ShippingDiscription =srcEntity.ShippingDiscription;
        desEntity.DocumentFile =srcEntity.DocumentFile;
        desEntity.SellOrBuy =srcEntity.SellOrBuy;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override ProductContract EntityToContract(Product product)
           {
               var productContract= new ProductContract()
               {
     
                  Id =product.Id,
                   
     
                  Name =product.Name,
                   
     
                  Brand =product.Brand,
                   
     
                  Image =product.Image,
                   
     
                  Image1 =product.Image1,
                   
     
                  Image2 =product.Image2,
                   
     
                  Price =product.Price,
                   
     
                  RegisterDate =product.RegisterDate,
                   
     
                  Discription =product.Discription,
                   
     
                  BusinessOwner =product.BusinessOwner!=null ?product.BusinessOwner.Name:null,
                  IEnumerableBusinessOwner= _businessownerService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_BusinessOwner =product.FK_BusinessOwner,
     
                  MadeInCountry =product.MadeInCountry,
                   
     
                  CountPrice =product.CountPrice,
                   
     
                  MinCountForPrice =product.MinCountForPrice,
                   
     
                  available =product.available,
                   
     
                  PersentMarkater =product.PersentMarkater,
                   
     
                  AcceptReturnDay =product.AcceptReturnDay,
                   
     
                  ShippingDiscription =product.ShippingDiscription,
                   
     
                  DocumentFile =product.DocumentFile,
                   
     
                  SellOrBuy =product.SellOrBuy,
                   
               };
              PartialMethodEntityToContract(ref  product, ref  productContract);
              return productContract;
           }
             partial void PartialMethodEntityToContract(ref Product product, ref ProductContract productContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override ProductContract EntityToContract(Product product,ProductContract productContract)
           {
    
                   
                 productContract.Id=product.Id;
                   
     
                 productContract.Name=product.Name;
                   
     
                 productContract.Brand=product.Brand;
                   
     
                 productContract.Image=product.Image;
                   
     
                 productContract.Image1=product.Image1;
                   
     
                 productContract.Image2=product.Image2;
                   
     
                 productContract.Price=product.Price;
                   
     
                 productContract.RegisterDate=product.RegisterDate;
                   
     
                 productContract.Discription=product.Discription;
                   
     
                 productContract.BusinessOwner=product.BusinessOwner != null ? product.BusinessOwner.Name : null;
                  productContract.IEnumerableBusinessOwner= _businessownerService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 productContract.FK_BusinessOwner =product.FK_BusinessOwner;
     
                 productContract.MadeInCountry=product.MadeInCountry;
                   
     
                 productContract.CountPrice=product.CountPrice;
                   
     
                 productContract.MinCountForPrice=product.MinCountForPrice;
                   
     
                 productContract.available=product.available;
                   
     
                 productContract.PersentMarkater=product.PersentMarkater;
                   
     
                 productContract.AcceptReturnDay=product.AcceptReturnDay;
                   
     
                 productContract.ShippingDiscription=product.ShippingDiscription;
                   
     
                 productContract.DocumentFile=product.DocumentFile;
                   
     
                 productContract.SellOrBuy=product.SellOrBuy;
                   
               
             return productContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Product FormCollectionToEntity(FormCollection formCollection)
           {
               var product=new Product()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                Brand =Convert.ToString (formCollection["Brand"]) ,
                Image =Convert.ToString (formCollection["Image"]) ,
                Image1 =Convert.ToString (formCollection["Image1"]) ,
                Image2 =Convert.ToString (formCollection["Image2"]) ,
                Price =Convert.ToDecimal (formCollection["Price"]) ,
                RegisterDate =Convert.ToString (formCollection["RegisterDate"]) ,
                Discription =Convert.ToString (formCollection["Discription"]) ,
                 FK_BusinessOwner =Convert.ToInt32(formCollection["IEnumerableBusinessOwner"]) ,
                MadeInCountry =Convert.ToString (formCollection["MadeInCountry"]) ,
                CountPrice =Convert.ToDecimal (formCollection["CountPrice"]) ,
                MinCountForPrice =Convert.ToInt32 (formCollection["MinCountForPrice"]) ,
                available =Convert.ToInt32 (formCollection["available"]) ,
                PersentMarkater =Convert.ToSingle (formCollection["PersentMarkater"]) ,
                AcceptReturnDay =Convert.ToByte (formCollection["AcceptReturnDay"]) ,
                ShippingDiscription =Convert.ToString (formCollection["ShippingDiscription"]) ,
                DocumentFile =Convert.ToString (formCollection["DocumentFile"]) ,
                SellOrBuy =Convert.ToBoolean (formCollection["SellOrBuy"]) ,
               };
      
             return product;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Product FormCollectionToEntity(FormCollection formCollection,Product product)//دستی
           {
              if (product == null) return this.FormCollectionToEntity(formCollection );
        
               product.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : product.Id);
    
    
               product.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : product.Name);
    
    
               product.Brand =(Convert.ToString(formCollection["Brand"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Brand"]) : product.Brand);
    
    
               product.Image =(Convert.ToString(formCollection["Image"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Image"]) : product.Image);
    
    
               product.Image1 =(Convert.ToString(formCollection["Image1"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Image1"]) : product.Image1);
    
    
               product.Image2 =(Convert.ToString(formCollection["Image2"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Image2"]) : product.Image2);
    
    
               product.Price =(Convert.ToString(formCollection["Price"]) != ConstSetting.NoChenge ? Convert.ToDecimal (formCollection["Price"]) : product.Price);
    
    
               product.RegisterDate =(Convert.ToString(formCollection["RegisterDate"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["RegisterDate"]) : product.RegisterDate);
    
    
               product.Discription =(Convert.ToString(formCollection["Discription"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Discription"]) : product.Discription);
    
     
    
                product.FK_BusinessOwner =(Convert.ToString(formCollection["IEnumerableBusinessOwner"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableBusinessOwner"]) :  product.FK_BusinessOwner);
    
    
               product.MadeInCountry =(Convert.ToString(formCollection["MadeInCountry"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["MadeInCountry"]) : product.MadeInCountry);
    
    
               product.CountPrice =(Convert.ToString(formCollection["CountPrice"]) != ConstSetting.NoChenge ? Convert.ToDecimal (formCollection["CountPrice"]) : product.CountPrice);
    
    
               product.MinCountForPrice =(Convert.ToString(formCollection["MinCountForPrice"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["MinCountForPrice"]) : product.MinCountForPrice);
    
    
               product.available =(Convert.ToString(formCollection["available"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["available"]) : product.available);
    
    
               product.PersentMarkater =(Convert.ToString(formCollection["PersentMarkater"]) != ConstSetting.NoChenge ? Convert.ToSingle (formCollection["PersentMarkater"]) : product.PersentMarkater);
    
    
               product.AcceptReturnDay =(Convert.ToString(formCollection["AcceptReturnDay"]) != ConstSetting.NoChenge ? Convert.ToByte (formCollection["AcceptReturnDay"]) : product.AcceptReturnDay);
    
    
               product.ShippingDiscription =(Convert.ToString(formCollection["ShippingDiscription"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["ShippingDiscription"]) : product.ShippingDiscription);
    
    
               product.DocumentFile =(Convert.ToString(formCollection["DocumentFile"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["DocumentFile"]) : product.DocumentFile);
    
    
               product.SellOrBuy =(Convert.ToString(formCollection["SellOrBuy"]) != ConstSetting.NoChenge ? Convert.ToBoolean (formCollection["SellOrBuy"]) : product.SellOrBuy);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref product);
             return  product;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Product product);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class ProvinceMaper : BaseMaper<Province,ProvinceContract>
    {
    
            public override void EntityToEntity(Province srcEntity, Province desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.country =srcEntity.country;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override ProvinceContract EntityToContract(Province province)
           {
               var provinceContract= new ProvinceContract()
               {
     
                  Id =province.Id,
                   
     
                  Name =province.Name,
                   
     
                  country =province.country,
                   
               };
              PartialMethodEntityToContract(ref  province, ref  provinceContract);
              return provinceContract;
           }
             partial void PartialMethodEntityToContract(ref Province province, ref ProvinceContract provinceContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override ProvinceContract EntityToContract(Province province,ProvinceContract provinceContract)
           {
    
                   
                 provinceContract.Id=province.Id;
                   
     
                 provinceContract.Name=province.Name;
                   
     
                 provinceContract.country=province.country;
                   
               
             return provinceContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Province FormCollectionToEntity(FormCollection formCollection)
           {
               var province=new Province()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                country =Convert.ToString (formCollection["country"]) ,
               };
      
             return province;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Province FormCollectionToEntity(FormCollection formCollection,Province province)//دستی
           {
              if (province == null) return this.FormCollectionToEntity(formCollection );
        
               province.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : province.Id);
    
    
               province.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : province.Name);
    
    
               province.country =(Convert.ToString(formCollection["country"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["country"]) : province.country);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref province);
             return  province;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Province province);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class RoleMaper : BaseMaper<Role,RoleContract>
    {
    
            public override void EntityToEntity(Role srcEntity, Role desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.Discription =srcEntity.Discription;
        desEntity.Type =srcEntity.Type;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override RoleContract EntityToContract(Role role)
           {
               var roleContract= new RoleContract()
               {
     
                  Id =role.Id,
                   
     
                  Name =role.Name,
                   
     
                  Discription =role.Discription,
                   
     
                  Type =role.Type,
                   
               };
              PartialMethodEntityToContract(ref  role, ref  roleContract);
              return roleContract;
           }
             partial void PartialMethodEntityToContract(ref Role role, ref RoleContract roleContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override RoleContract EntityToContract(Role role,RoleContract roleContract)
           {
    
                   
                 roleContract.Id=role.Id;
                   
     
                 roleContract.Name=role.Name;
                   
     
                 roleContract.Discription=role.Discription;
                   
     
                 roleContract.Type=role.Type;
                   
               
             return roleContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Role FormCollectionToEntity(FormCollection formCollection)
           {
               var role=new Role()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                Discription =Convert.ToString (formCollection["Discription"]) ,
                Type =Convert.ToInt16 (formCollection["Type"]) ,
               };
      
             return role;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Role FormCollectionToEntity(FormCollection formCollection,Role role)//دستی
           {
              if (role == null) return this.FormCollectionToEntity(formCollection );
        
               role.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : role.Id);
    
    
               role.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : role.Name);
    
    
               role.Discription =(Convert.ToString(formCollection["Discription"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Discription"]) : role.Discription);
    
    
               role.Type =(Convert.ToString(formCollection["Type"]) != ConstSetting.NoChenge ? Convert.ToInt16 (formCollection["Type"]) : role.Type);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref role);
             return  role;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Role role);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class SettingMaper : BaseMaper<Setting,SettingContract>
    {
     
        private   CategorySettingService  _categorysettingService = new CategorySettingService();
    
            public override void EntityToEntity(Setting srcEntity, Setting desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.Value =srcEntity.Value;
        desEntity.Value2 =srcEntity.Value2;
        desEntity.FK_CategorySetting =srcEntity.FK_CategorySetting;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override SettingContract EntityToContract(Setting setting)
           {
               var settingContract= new SettingContract()
               {
     
                  Id =setting.Id,
                   
     
                  Name =setting.Name,
                   
     
                  Value =setting.Value,
                   
     
                  Value2 =setting.Value2,
                   
     
                  CategorySetting =setting.CategorySetting!=null ?setting.CategorySetting.Name:null,
                  IEnumerableCategorySetting= _categorysettingService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_CategorySetting =setting.FK_CategorySetting,
               };
              PartialMethodEntityToContract(ref  setting, ref  settingContract);
              return settingContract;
           }
             partial void PartialMethodEntityToContract(ref Setting setting, ref SettingContract settingContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override SettingContract EntityToContract(Setting setting,SettingContract settingContract)
           {
    
                   
                 settingContract.Id=setting.Id;
                   
     
                 settingContract.Name=setting.Name;
                   
     
                 settingContract.Value=setting.Value;
                   
     
                 settingContract.Value2=setting.Value2;
                   
     
                 settingContract.CategorySetting=setting.CategorySetting != null ? setting.CategorySetting.Name : null;
                  settingContract.IEnumerableCategorySetting= _categorysettingService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 settingContract.FK_CategorySetting =setting.FK_CategorySetting;
               
             return settingContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Setting FormCollectionToEntity(FormCollection formCollection)
           {
               var setting=new Setting()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                Value =Convert.ToString (formCollection["Value"]) ,
                Value2 =Convert.ToString (formCollection["Value2"]) ,
                 FK_CategorySetting =Convert.ToInt32(formCollection["IEnumerableCategorySetting"]) ,
               };
      
             return setting;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override Setting FormCollectionToEntity(FormCollection formCollection,Setting setting)//دستی
           {
              if (setting == null) return this.FormCollectionToEntity(formCollection );
        
               setting.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : setting.Id);
    
    
               setting.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : setting.Name);
    
    
               setting.Value =(Convert.ToString(formCollection["Value"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Value"]) : setting.Value);
    
    
               setting.Value2 =(Convert.ToString(formCollection["Value2"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Value2"]) : setting.Value2);
    
     
    
                setting.FK_CategorySetting =(Convert.ToString(formCollection["IEnumerableCategorySetting"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableCategorySetting"]) :  setting.FK_CategorySetting);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref setting);
             return  setting;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref Setting setting);
    }
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    
    public  partial class UserMaper : BaseMaper<User,UserContract>
    {
     
        private   RoleService  _roleService = new RoleService();
    
            public override void EntityToEntity(User srcEntity, User desEntity)
        {
        desEntity.Id =srcEntity.Id;
        desEntity.Name =srcEntity.Name;
        desEntity.Email =srcEntity.Email;
        desEntity.Mobile =srcEntity.Mobile;
        desEntity.RegisterDate =srcEntity.RegisterDate;
        desEntity.FK_Role =srcEntity.FK_Role;
        desEntity.IpComputer =srcEntity.IpComputer;
        desEntity.CurrentInvoice =srcEntity.CurrentInvoice;
        desEntity.Ative =srcEntity.Ative;
        desEntity.AtivationCode =srcEntity.AtivationCode;
        desEntity.Password =srcEntity.Password;
        }
    
    
    
    
        /// <summary>  
        /// این متد یک کلاس انتیتی را به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override UserContract EntityToContract(User user)
           {
               var userContract= new UserContract()
               {
     
                  Id =user.Id,
                   
     
                  Name =user.Name,
                   
     
                  Email =user.Email,
                   
     
                  Mobile =user.Mobile,
                   
     
                  RegisterDate =user.RegisterDate,
                   
     
                  Role =user.Role!=null ?user.Role.Name:null,
                  IEnumerableRole= _roleService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}), 
                 FK_Role =user.FK_Role,
     
                  IpComputer =user.IpComputer,
                   
     
                  CurrentInvoice =user.CurrentInvoice,
                   
     
                  Ative =user.Ative,
                   
     
                  AtivationCode =user.AtivationCode,
                   
     
                  Password =user.Password,
                   
               };
              PartialMethodEntityToContract(ref  user, ref  userContract);
              return userContract;
           }
             partial void PartialMethodEntityToContract(ref User user, ref UserContract userContract);
        /// <summary>  
        /// این متد یک کلاس انتیتیی و یک کلاس  کنترکت خالی را گرفته و کلاس کانترکت پر شده را بر می گرداند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override UserContract EntityToContract(User user,UserContract userContract)
           {
    
                   
                 userContract.Id=user.Id;
                   
     
                 userContract.Name=user.Name;
                   
     
                 userContract.Email=user.Email;
                   
     
                 userContract.Mobile=user.Mobile;
                   
     
                 userContract.RegisterDate=user.RegisterDate;
                   
     
                 userContract.Role=user.Role != null ? user.Role.Name : null;
                  userContract.IEnumerableRole= _roleService.GetAll().Select(e=> new SelectListItem{Value= e.Id.ToString(),Text =e.Name}); 
                 userContract.FK_Role =user.FK_Role;
     
                 userContract.IpComputer=user.IpComputer;
                   
     
                 userContract.CurrentInvoice=user.CurrentInvoice;
                   
     
                 userContract.Ative=user.Ative;
                   
     
                 userContract.AtivationCode=user.AtivationCode;
                   
     
                 userContract.Password=user.Password;
                   
               
             return userContract ;
           }
        /// <summary>  
        /// این متد یک فرم کالکشن را به کلاس انتیتی معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override User FormCollectionToEntity(FormCollection formCollection)
           {
               var user=new User()
               {
                    Id =Convert.ToInt32 (formCollection["HiddenId"]) ,
                Name =Convert.ToString (formCollection["Name"]) ,
                Email =Convert.ToString (formCollection["Email"]) ,
                Mobile =Convert.ToString (formCollection["Mobile"]) ,
                RegisterDate =Convert.ToString (formCollection["RegisterDate"]) ,
                 FK_Role =Convert.ToInt32(formCollection["IEnumerableRole"]) ,
                IpComputer =Convert.ToString (formCollection["IpComputer"]) ,
                CurrentInvoice =Convert.ToInt32 (formCollection["CurrentInvoice"]) ,
                Ative =Convert.ToBoolean (formCollection["Ative"]) ,
                AtivationCode =Convert.ToString (formCollection["AtivationCode"]) ,
                Password =Convert.ToString (formCollection["Password"]) ,
               };
      
             return user;
           }
    
        /// <summary>  
        /// این متد با گرفتن یک کلاس انتیتی را، به کلاس کانترکت معادل خود تبدیل می کند
        /// </summary>
        /// <param name=""></param>
        /// <returns></returns>
        public override User FormCollectionToEntity(FormCollection formCollection,User user)//دستی
           {
              if (user == null) return this.FormCollectionToEntity(formCollection );
        
               user.Id =(Convert.ToString(formCollection["HiddenId"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["HiddenId"]) : user.Id);
    
    
               user.Name =(Convert.ToString(formCollection["Name"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Name"]) : user.Name);
    
    
               user.Email =(Convert.ToString(formCollection["Email"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Email"]) : user.Email);
    
    
               user.Mobile =(Convert.ToString(formCollection["Mobile"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Mobile"]) : user.Mobile);
    
    
               user.RegisterDate =(Convert.ToString(formCollection["RegisterDate"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["RegisterDate"]) : user.RegisterDate);
    
     
    
                user.FK_Role =(Convert.ToString(formCollection["IEnumerableRole"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["IEnumerableRole"]) :  user.FK_Role);
    
    
               user.IpComputer =(Convert.ToString(formCollection["IpComputer"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["IpComputer"]) : user.IpComputer);
    
    
               user.CurrentInvoice =(Convert.ToString(formCollection["CurrentInvoice"]) != ConstSetting.NoChenge ? Convert.ToInt32 (formCollection["CurrentInvoice"]) : user.CurrentInvoice);
    
    
               user.Ative =(Convert.ToString(formCollection["Ative"]) != ConstSetting.NoChenge ? Convert.ToBoolean (formCollection["Ative"]) : user.Ative);
    
    
               user.AtivationCode =(Convert.ToString(formCollection["AtivationCode"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["AtivationCode"]) : user.AtivationCode);
    
    
               user.Password =(Convert.ToString(formCollection["Password"]) != ConstSetting.NoChenge ? Convert.ToString (formCollection["Password"]) : user.Password);
    
           
             PartialMethodFormCollectionToEntity(ref formCollection,ref user);
             return  user;
           }
    partial void PartialMethodFormCollectionToEntity(ref FormCollection formCollection,ref User user);
    }
}
