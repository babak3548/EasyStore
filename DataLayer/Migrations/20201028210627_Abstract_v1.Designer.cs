// <auto-generated />
using System;
using DataLayer.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataLayer.Migrations
{
    [DbContext(typeof(OnlineShopping))]
    [Migration("20201028210627_Abstract_v1")]
    partial class Abstract_v1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataLayer.EF.Access", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("DisplayMode")
                        .HasColumnType("bigint");

                    b.Property<int>("FkFiled")
                        .HasColumnName("FK_Filed")
                        .HasColumnType("int");

                    b.Property<int>("FkRole")
                        .HasColumnName("FK_Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FkRole");

                    b.HasIndex("FkFiled", "FkRole")
                        .IsUnique()
                        .HasName("IX_Access");

                    b.ToTable("Access","Accsess");
                });

            modelBuilder.Entity("DataLayer.EF.Accounting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Creditor")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2(7)")
                        .HasMaxLength(10);

                    b.Property<decimal>("Debtor")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("FkUser")
                        .HasColumnName("FK_User")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2(7)");

                    b.HasKey("Id");

                    b.HasIndex("FkUser");

                    b.ToTable("Accounting","Accounting");
                });

            modelBuilder.Entity("DataLayer.EF.BridgeBusinessOwnerMarketer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AcceptRequest")
                        .HasColumnType("bit");

                    b.Property<string>("Date")
                        .HasColumnName("date")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("DiscriptionRequest")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("FkBusinessOwner")
                        .HasColumnName("FK_BusinessOwner")
                        .HasColumnType("int");

                    b.Property<int>("FkMarketer")
                        .HasColumnName("FK_Marketer")
                        .HasColumnType("int");

                    b.Property<bool?>("RejectRequest")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequestFromBusinessOwner")
                        .HasColumnType("bit");

                    b.Property<bool?>("RequestFromMarketer")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FkMarketer");

                    b.HasIndex("FkBusinessOwner", "FkMarketer")
                        .IsUnique()
                        .HasName("IX_Bridge_BusinessOwner_Marketer");

                    b.ToTable("Bridge_BusinessOwner_Marketer","Shapping");
                });

            modelBuilder.Entity("DataLayer.EF.BridgeInvoiceProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("FkInvoice")
                        .HasColumnName("FK_Invoice")
                        .HasColumnType("int");

                    b.Property<int>("FkProduct")
                        .HasColumnName("FK_Product")
                        .HasColumnType("int");

                    b.Property<string>("HistoryStateAndDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("InvoiceDetilasState")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("FkInvoice");

                    b.HasIndex("FkProduct");

                    b.ToTable("Bridge_Invoice_Product","Accounting");
                });

            modelBuilder.Entity("DataLayer.EF.BridgeProvinceBusinessOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("AnyXkg")
                        .HasColumnName("AnyXKG")
                        .HasColumnType("real");

                    b.Property<decimal>("AnyXkgmony")
                        .HasColumnName("AnyXKGMony")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("FkBusinessOwner")
                        .HasColumnName("FK_BusinessOwner")
                        .HasColumnType("int");

                    b.Property<int>("FkProvince")
                        .HasColumnName("FK_Province")
                        .HasColumnType("int");

                    b.Property<decimal?>("FreeGratherThanMony")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("Id");

                    b.HasIndex("FkProvince");

                    b.HasIndex("FkBusinessOwner", "FkProvince")
                        .IsUnique()
                        .HasName("IX_Bridge_Province_BusinessOwner");

                    b.ToTable("Bridge_Province_BusinessOwner","Shapping");
                });

            modelBuilder.Entity("DataLayer.EF.BrigeProductCategoryProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkCategoryProperty")
                        .HasColumnName("FkCategoryProperty")
                        .HasColumnType("int");

                    b.Property<int>("FkProduct")
                        .HasColumnName("FkProduct")
                        .HasColumnType("int");

                    b.Property<string>("value")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("FkCategoryProperty");

                    b.HasIndex("FkProduct");

                    b.ToTable("BrigeProductCategoryProperty","Shapping");
                });

            modelBuilder.Entity("DataLayer.EF.BusinessOwner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("CalcTypeShipping")
                        .HasColumnType("int");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("DocumentFile")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("FkMarketer")
                        .HasColumnName("FK_Marketer")
                        .HasColumnType("int");

                    b.Property<int>("FkProvince")
                        .HasColumnName("FK_Province")
                        .HasColumnType("int");

                    b.Property<int>("FkUser")
                        .HasColumnName("FK_User")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("InstaOrOtherSocial")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<decimal?>("PaymentPorsantAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("TypeActivity")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int>("TypeSells")
                        .HasColumnType("int");

                    b.Property<int?>("TypeShippings")
                        .HasColumnName("typeShippings")
                        .HasColumnType("int");

                    b.Property<string>("WebSiteAddress")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WordKey")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("FkMarketer");

                    b.HasIndex("FkProvince");

                    b.HasIndex("FkUser")
                        .IsUnique()
                        .HasName("IX_BusinessOwner");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("BusinessOwnerNameKey");

                    b.ToTable("BusinessOwner","Shapping");
                });

            modelBuilder.Entity("DataLayer.EF.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int?>("FkCategory")
                        .HasColumnName("FK_Category")
                        .HasColumnType("int");

                    b.Property<string>("IdsParent")
                        .HasColumnName("Ids_Parent")
                        .HasColumnType("char(50)")
                        .IsFixedLength(true)
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("PromotionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FkCategory");

                    b.ToTable("Category","Shapping");
                });

            modelBuilder.Entity("DataLayer.EF.CategoryProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("FKCategory")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FKCategory");

                    b.ToTable("CategoryProperty","Shapping");
                });

            modelBuilder.Entity("DataLayer.EF.CategorySetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CategorySetting","Miscellaneous");
                });

            modelBuilder.Entity("DataLayer.EF.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<short?>("CommentType")
                        .HasColumnType("smallint");

                    b.Property<string>("ComputerIp")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("EmailOrMobile")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("FkComment")
                        .HasColumnName("FK_Comment")
                        .HasColumnType("int");

                    b.Property<int?>("FkProduct")
                        .HasColumnName("FK_Product")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsPositiveComment")
                        .HasColumnType("bit");

                    b.Property<string>("KeyWord")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TextValue")
                        .IsRequired()
                        .HasColumnName("Text")
                        .HasColumnType("nvarchar(600)")
                        .HasMaxLength(600);

                    b.Property<int>("VoteCount")
                        .HasColumnType("int");

                    b.Property<float?>("VotePositive")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("FkComment");

                    b.HasIndex("FkProduct");

                    b.ToTable("Comment","Miscellaneous");
                });

            modelBuilder.Entity("DataLayer.EF.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abstract")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BanerImageAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShowValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VideoAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Writer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Content","Accsess");
                });

            modelBuilder.Entity("DataLayer.EF.DisputeResolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<short?>("DisputerwhoPerson")
                        .HasColumnName("disputerwhoPerson")
                        .HasColumnType("smallint")
                        .HasComment("اگر در آینده لازم باشد که چه کسی از کی شکایت کرده لازم می شود ");

                    b.Property<string>("FileDocumentAdress")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int?>("FkBusinessOwner")
                        .HasColumnName("FK_BusinessOwner")
                        .HasColumnType("int");

                    b.Property<int>("FkInvoice")
                        .HasColumnName("FK_Invoice")
                        .HasColumnType("int");

                    b.Property<int?>("FkMarketer")
                        .HasColumnName("FK_Marketer")
                        .HasColumnType("int");

                    b.Property<int?>("FkUser")
                        .HasColumnName("FK_User")
                        .HasColumnType("int");

                    b.Property<short>("Writer")
                        .HasColumnName("writer")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FkBusinessOwner");

                    b.HasIndex("FkInvoice");

                    b.HasIndex("FkMarketer");

                    b.HasIndex("FkUser");

                    b.ToTable("DisputeResolution","Accounting");
                });

            modelBuilder.Entity("DataLayer.EF.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("PersianName")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Entity","Accsess");
                });

            modelBuilder.Entity("DataLayer.EF.Filed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkEntity")
                        .HasColumnName("FK_Entity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<short>("OrderByValue")
                        .HasColumnType("smallint");

                    b.Property<short?>("PartialType")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FkEntity");

                    b.HasIndex("Name", "FkEntity")
                        .IsUnique()
                        .HasName("IX_Filed");

                    b.ToTable("Filed","Accsess");
                });

            modelBuilder.Entity("DataLayer.EF.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentForBusinessman")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("DeliveryAddress")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("FkBusinessOwner")
                        .HasColumnName("FK_BusinessOwner")
                        .HasColumnType("int");

                    b.Property<int?>("FkMarketer")
                        .HasColumnName("FK_Marketer")
                        .HasColumnType("int");

                    b.Property<int?>("FkProvince")
                        .HasColumnName("FK_Province")
                        .HasColumnType("int");

                    b.Property<int>("FkUser")
                        .HasColumnName("FK_User")
                        .HasColumnType("int");

                    b.Property<string>("HistoryStateAndDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteForBusinessOwner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteForUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("PaymentBankCode")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("PaymentToCountinue")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2(7)")
                        .HasMaxLength(10);

                    b.Property<decimal>("RejectedCost")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("SendingDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<byte>("ShippingCompany")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("ShippingCost")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("TimeBankPayInfo")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<decimal>("TotalSumProductPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("TracingShippingNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TransctionRefrenceId")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("Vat")
                        .HasColumnType("decimal(18, 0)");

                    b.HasKey("Id");

                    b.HasIndex("FkBusinessOwner");

                    b.HasIndex("FkMarketer");

                    b.HasIndex("FkProvince");

                    b.HasIndex("FkUser");

                    b.ToTable("Invoice","Accounting");
                });

            modelBuilder.Entity("DataLayer.EF.Languge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkFiled")
                        .HasColumnName("FK_Filed")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FkFiled", "Name")
                        .IsUnique()
                        .HasName("IX_Languge");

                    b.ToTable("Languge","Accsess");
                });

            modelBuilder.Entity("DataLayer.EF.Marketer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<int?>("FkMarketer")
                        .HasColumnName("FK_Marketer")
                        .HasColumnType("int");

                    b.Property<int>("FkUser")
                        .HasColumnName("FK_User")
                        .HasColumnType("int");

                    b.Property<string>("Gmail")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("PaymentPorsantAmount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Skype")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Specialty")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("WebSiteAddress")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WordKey")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Yahoo")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("FkMarketer");

                    b.HasIndex("FkUser")
                        .IsUnique()
                        .HasName("IX_Marketer");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasName("MarketerNameKey");

                    b.ToTable("Marketer","Shapping");
                });

            modelBuilder.Entity("DataLayer.EF.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("FkUseSender")
                        .HasColumnName("FK_UseSender")
                        .HasColumnType("int");

                    b.Property<int>("FkUserReceiver")
                        .HasColumnName("FK_UserReceiver")
                        .HasColumnType("int");

                    b.Property<bool>("Readed")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<short?>("Type")
                        .HasColumnName("type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("FkUseSender");

                    b.HasIndex("FkUserReceiver");

                    b.ToTable("Message","Miscellaneous");
                });

            modelBuilder.Entity("DataLayer.EF.MultiLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KeyLanguage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersianValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MultiLanguage");
                });

            modelBuilder.Entity("DataLayer.EF.PaymentLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountingId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<byte>("PaymentBankCode")
                        .HasColumnType("tinyint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("UserId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountingId")
                        .IsUnique()
                        .HasFilter("[AccountingId] IS NOT NULL");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UserId1");

                    b.ToTable("PaymentLogs");
                });

            modelBuilder.Entity("DataLayer.EF.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte?>("AcceptReturnDay")
                        .HasColumnType("tinyint");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("Available")
                        .HasColumnName("available")
                        .HasColumnType("int");

                    b.Property<string>("AvailableColors")
                        .HasColumnName("AvailableColors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("BeforDiscountPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal>("BuyPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("CountPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("Dimansion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FkBusinessOwner")
                        .HasColumnName("FK_BusinessOwner")
                        .HasColumnType("int");

                    b.Property<int>("FkCategory")
                        .HasColumnName("FK_Category")
                        .HasColumnType("int");

                    b.Property<int?>("FkContent")
                        .HasColumnName("FK_Content")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Image4")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MadeInCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<byte>("MaxShippingDay")
                        .HasColumnType("tinyint");

                    b.Property<int?>("MinCountForPrice")
                        .HasColumnType("int");

                    b.Property<byte>("MinShippingDay")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<float>("PersentMarkater")
                        .HasColumnType("real");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int?>("RankSelling")
                        .HasColumnType("int");

                    b.Property<short?>("RankShow")
                        .HasColumnType("smallint");

                    b.Property<string>("RegisterDate")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ShippingDiscription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("UnitBuy")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<double>("WightUnitBuyWithKg")
                        .HasColumnName("wightUnitBuyWithKG")
                        .HasColumnType("float");

                    b.Property<string>("WordKey")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("FkBusinessOwner");

                    b.HasIndex("FkCategory");

                    b.HasIndex("Name", "FkBusinessOwner")
                        .IsUnique()
                        .HasName("IX_Product");

                    b.ToTable("Product","Shapping");
                });

            modelBuilder.Entity("DataLayer.EF.PromotionProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpireDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FkCategory")
                        .HasColumnName("FkCategory")
                        .HasColumnType("int");

                    b.Property<int?>("FkProduct")
                        .HasColumnName("FkProduct")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("Order")
                        .HasColumnName("Order")
                        .HasColumnType("int");

                    b.Property<int>("PromotionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FkCategory");

                    b.HasIndex("FkProduct");

                    b.ToTable("PromotionProduct");
                });

            modelBuilder.Entity("DataLayer.EF.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("FkProvince")
                        .HasColumnName("Fk_Province")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FkProvince");

                    b.ToTable("Province","Miscellaneous");
                });

            modelBuilder.Entity("DataLayer.EF.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<short?>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Role","Accsess");
                });

            modelBuilder.Entity("DataLayer.EF.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FkCategorySetting")
                        .HasColumnName("FK_CategorySetting")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Value2")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("FkCategorySetting");

                    b.ToTable("Setting","Miscellaneous");
                });

            modelBuilder.Entity("DataLayer.EF.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<string>("AtivationCode")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool?>("Ative")
                        .HasColumnType("bit");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<int?>("CurrentInvoice")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Family")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("FkProvince")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FkRole")
                        .HasColumnName("FK_Role")
                        .HasColumnType("int");

                    b.Property<string>("IpComputer")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<string>("IpComputerCreator")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<string>("IpComputerLast")
                        .HasColumnType("nvarchar(16)")
                        .HasMaxLength(16);

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(14)")
                        .HasMaxLength(14);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<string>("RegisterDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<string>("TempPassword")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasName("IX_User")
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("FkRole");

                    b.ToTable("User","Accsess");
                });

            modelBuilder.Entity("DataLayer.EF.Access", b =>
                {
                    b.HasOne("DataLayer.EF.Filed", "FkFiledNavigation")
                        .WithMany("Access")
                        .HasForeignKey("FkFiled")
                        .HasConstraintName("FK_Access_Filed")
                        .IsRequired();

                    b.HasOne("DataLayer.EF.Role", "FkRoleNavigation")
                        .WithMany("Access")
                        .HasForeignKey("FkRole")
                        .HasConstraintName("FK_Access_Role")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.Accounting", b =>
                {
                    b.HasOne("DataLayer.EF.User", "FkUserNavigation")
                        .WithMany("Accounting")
                        .HasForeignKey("FkUser")
                        .HasConstraintName("FK_Accounting_User")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.BridgeBusinessOwnerMarketer", b =>
                {
                    b.HasOne("DataLayer.EF.BusinessOwner", "FkBusinessOwnerNavigation")
                        .WithMany("BridgeBusinessOwnerMarketer")
                        .HasForeignKey("FkBusinessOwner")
                        .HasConstraintName("FK_Bridge_BusinessOwner_Marketer_BusinessOwner")
                        .IsRequired();

                    b.HasOne("DataLayer.EF.Marketer", "FkMarketerNavigation")
                        .WithMany("BridgeBusinessOwnerMarketer")
                        .HasForeignKey("FkMarketer")
                        .HasConstraintName("FK_Bridge_BusinessOwner_Marketer_Marketer")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.BridgeInvoiceProduct", b =>
                {
                    b.HasOne("DataLayer.EF.Invoice", "FkInvoiceNavigation")
                        .WithMany("BridgeInvoiceProduct")
                        .HasForeignKey("FkInvoice")
                        .HasConstraintName("FK_Bridge_Invoice_Product_Invoice")
                        .IsRequired();

                    b.HasOne("DataLayer.EF.Product", "FkProductNavigation")
                        .WithMany("BridgeInvoiceProduct")
                        .HasForeignKey("FkProduct")
                        .HasConstraintName("FK_Bridge_Invoice_Product_Product")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.BridgeProvinceBusinessOwner", b =>
                {
                    b.HasOne("DataLayer.EF.BusinessOwner", "FkBusinessOwnerNavigation")
                        .WithMany("BridgeProvinceBusinessOwner")
                        .HasForeignKey("FkBusinessOwner")
                        .HasConstraintName("FK_Bridge_Province_BusinessOwner_BusinessOwner")
                        .IsRequired();

                    b.HasOne("DataLayer.EF.Province", "FkProvinceNavigation")
                        .WithMany("BridgeProvinceBusinessOwner")
                        .HasForeignKey("FkProvince")
                        .HasConstraintName("FK_Bridge_Province_BusinessOwner_Province")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.BrigeProductCategoryProperty", b =>
                {
                    b.HasOne("DataLayer.EF.CategoryProperty", "CategoryProperty")
                        .WithMany("BrigeProductCategories")
                        .HasForeignKey("FkCategoryProperty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.EF.Product", "Product")
                        .WithMany("BrigeProductCategories")
                        .HasForeignKey("FkProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.BusinessOwner", b =>
                {
                    b.HasOne("DataLayer.EF.Marketer", "FkMarketerNavigation")
                        .WithMany("BusinessOwner")
                        .HasForeignKey("FkMarketer")
                        .HasConstraintName("FK_BusinessOwner_Marketer");

                    b.HasOne("DataLayer.EF.Province", "FkProvinceNavigation")
                        .WithMany("BusinessOwner")
                        .HasForeignKey("FkProvince")
                        .HasConstraintName("FK_BusinessOwner_Province")
                        .IsRequired();

                    b.HasOne("DataLayer.EF.User", "FkUserNavigation")
                        .WithOne("BusinessOwner")
                        .HasForeignKey("DataLayer.EF.BusinessOwner", "FkUser")
                        .HasConstraintName("FK_BusinessOwner_User")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.Category", b =>
                {
                    b.HasOne("DataLayer.EF.Category", "FkCategoryNavigation")
                        .WithMany("InverseFkCategoryNavigation")
                        .HasForeignKey("FkCategory")
                        .HasConstraintName("FK_Category_Category");
                });

            modelBuilder.Entity("DataLayer.EF.CategoryProperty", b =>
                {
                    b.HasOne("DataLayer.EF.Category", "FkCategoryNavigation")
                        .WithMany()
                        .HasForeignKey("FKCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.Comment", b =>
                {
                    b.HasOne("DataLayer.EF.Comment", "FkCommentNavigation")
                        .WithMany("InverseFkCommentNavigation")
                        .HasForeignKey("FkComment")
                        .HasConstraintName("FK_Comment_Comment");

                    b.HasOne("DataLayer.EF.Product", "FkProductNavigation")
                        .WithMany("Comment")
                        .HasForeignKey("FkProduct")
                        .HasConstraintName("FK_Comment_Product");
                });

            modelBuilder.Entity("DataLayer.EF.DisputeResolution", b =>
                {
                    b.HasOne("DataLayer.EF.BusinessOwner", "FkBusinessOwnerNavigation")
                        .WithMany("DisputeResolution")
                        .HasForeignKey("FkBusinessOwner")
                        .HasConstraintName("FK_DisputeResolution_BusinessOwner");

                    b.HasOne("DataLayer.EF.Invoice", "FkInvoiceNavigation")
                        .WithMany("DisputeResolution")
                        .HasForeignKey("FkInvoice")
                        .HasConstraintName("FK_DisputeResolution_Invoice")
                        .IsRequired();

                    b.HasOne("DataLayer.EF.Marketer", "FkMarketerNavigation")
                        .WithMany("DisputeResolution")
                        .HasForeignKey("FkMarketer")
                        .HasConstraintName("FK_DisputeResolution_Marketer");

                    b.HasOne("DataLayer.EF.User", "FkUserNavigation")
                        .WithMany("DisputeResolution")
                        .HasForeignKey("FkUser")
                        .HasConstraintName("FK_DisputeResolution_User");
                });

            modelBuilder.Entity("DataLayer.EF.Filed", b =>
                {
                    b.HasOne("DataLayer.EF.Entity", "FkEntityNavigation")
                        .WithMany("Filed")
                        .HasForeignKey("FkEntity")
                        .HasConstraintName("FK_Filed_Entity")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.Invoice", b =>
                {
                    b.HasOne("DataLayer.EF.BusinessOwner", "FkBusinessOwnerNavigation")
                        .WithMany("Invoice")
                        .HasForeignKey("FkBusinessOwner")
                        .HasConstraintName("FK_Invoice_BusinessOwner")
                        .IsRequired();

                    b.HasOne("DataLayer.EF.Marketer", "FkMarketerNavigation")
                        .WithMany("Invoice")
                        .HasForeignKey("FkMarketer")
                        .HasConstraintName("FK_Invoice_Marketer");

                    b.HasOne("DataLayer.EF.Province", "FkProvinceNavigation")
                        .WithMany("Invoice")
                        .HasForeignKey("FkProvince")
                        .HasConstraintName("FK_Invoice_Province");

                    b.HasOne("DataLayer.EF.User", "FkUserNavigation")
                        .WithMany("Invoice")
                        .HasForeignKey("FkUser")
                        .HasConstraintName("FK_Invoice_User1")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.Languge", b =>
                {
                    b.HasOne("DataLayer.EF.Filed", "FkFiledNavigation")
                        .WithMany("Languge")
                        .HasForeignKey("FkFiled")
                        .HasConstraintName("FK_Languge_Filed")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.Marketer", b =>
                {
                    b.HasOne("DataLayer.EF.Marketer", "FkMarketerNavigation")
                        .WithMany("InverseFkMarketerNavigation")
                        .HasForeignKey("FkMarketer")
                        .HasConstraintName("FK_Marketer_Marketer");

                    b.HasOne("DataLayer.EF.User", "FkUserNavigation")
                        .WithOne("Marketer")
                        .HasForeignKey("DataLayer.EF.Marketer", "FkUser")
                        .HasConstraintName("FK_Marketer_User")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.Message", b =>
                {
                    b.HasOne("DataLayer.EF.User", "FkUseSenderNavigation")
                        .WithMany("MessageFkUseSenderNavigation")
                        .HasForeignKey("FkUseSender")
                        .HasConstraintName("FK_Message_User")
                        .IsRequired();

                    b.HasOne("DataLayer.EF.User", "FkUserReceiverNavigation")
                        .WithMany("MessageFkUserReceiverNavigation")
                        .HasForeignKey("FkUserReceiver")
                        .HasConstraintName("FK_Message_User1")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.PaymentLog", b =>
                {
                    b.HasOne("DataLayer.EF.Accounting", "Accounting")
                        .WithOne("PaymentLog")
                        .HasForeignKey("DataLayer.EF.PaymentLog", "AccountingId");

                    b.HasOne("DataLayer.EF.Invoice", "FkInvoiceNavigation")
                        .WithMany("PaymentLogs")
                        .HasForeignKey("InvoiceId");

                    b.HasOne("DataLayer.EF.User", "User")
                        .WithMany("PaymentLogs")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("DataLayer.EF.Product", b =>
                {
                    b.HasOne("DataLayer.EF.BusinessOwner", "FkBusinessOwnerNavigation")
                        .WithMany("Product")
                        .HasForeignKey("FkBusinessOwner")
                        .HasConstraintName("FK_Product_BusinessOwner")
                        .IsRequired();

                    b.HasOne("DataLayer.EF.Category", "FkCategoryNavigation")
                        .WithMany("Product")
                        .HasForeignKey("FkCategory")
                        .HasConstraintName("FK_Product_Category")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.PromotionProduct", b =>
                {
                    b.HasOne("DataLayer.EF.Category", "Category")
                        .WithMany("PromotionProducts")
                        .HasForeignKey("FkCategory");

                    b.HasOne("DataLayer.EF.Product", "Product")
                        .WithMany("PromotionProducts")
                        .HasForeignKey("FkProduct");
                });

            modelBuilder.Entity("DataLayer.EF.Province", b =>
                {
                    b.HasOne("DataLayer.EF.Province", "FkProvinceNavigation")
                        .WithMany("InverseFkProvinceNavigation")
                        .HasForeignKey("FkProvince");
                });

            modelBuilder.Entity("DataLayer.EF.Setting", b =>
                {
                    b.HasOne("DataLayer.EF.CategorySetting", "FkCategorySettingNavigation")
                        .WithMany("Setting")
                        .HasForeignKey("FkCategorySetting")
                        .HasConstraintName("FK_Setting_CategorySetting")
                        .IsRequired();
                });

            modelBuilder.Entity("DataLayer.EF.User", b =>
                {
                    b.HasOne("DataLayer.EF.Role", "FkRoleNavigation")
                        .WithMany("User")
                        .HasForeignKey("FkRole")
                        .HasConstraintName("FK_User_Role")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
